workspace:
  directory: /home/codio/workspace/codio-student-unit-exclude/ThinkJava2
  tex: thinkjava2.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
  suppressPageNumbering: true
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
 - code
 - fig: "*.jpg"
sections:
  - name: "Preface"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Philosophy Behind the Book"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Object-Oriented Programming"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Changes to the Second Edition"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "About the Appendixes"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Using the Code Examples"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Acknowledgments"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Computer Programming"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is a Computer?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is Programming?"
    type: section
    transformations:
      - add: | 
              Here is a random line of text. 
        position: 105
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Hello World Program -- TEST CHANGE"
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
                 See the example java code in the left pane. This is a random sentence. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello.java java -cp code/ch01/ Hello )

          position: 105
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello.java"
            panel: 0
            action: open
  - name: "Compiling Java Programs"
    type: section
  - name: "Displaying Two Messages"
    type: section
  - name: "Formatting Source Code"
    type: section
  - name: "Using Escape Sequences"
    type: section
  - name: "What Is Computer Science?"
    type: section
  - name: "Debugging Programs"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Variables and Operators"
    type: chapter
  - name: "Declaring Variables"
    type: section
  - name: "Assigning Variables"
    type: section
  - name: "Memory Diagrams"
    type: section
  - name: "Printing Variables"
    type: section
  - name: "Arithmetic Operators"
    type: section
  - name: "Floating-Point Numbers"
    type: section
  - name: "Rounding Errors"
    type: section
  - name: "Operators for Strings"
    type: section
  - name: "Compiler Error Messages"
    type: section
  - name: "Other Types of Errors"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Input and Output"
    type: chapter
  - name: "The System Class"
    type: section
  - name: "The Scanner Class"
    type: section
  - name: "Language Elements"
    type: section
  - name: "Literals and Constants"
    type: section
  - name: "Formatting Output"
    type: section
  - name: "Reading Error Messages"
    type: section
  - name: "Type Cast Operators"
    type: section
  - name: "Remainder Operator"
    type: section
  - name: "Putting It All Together"
    type: section
  - name: "The Scanner Bug"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Methods and Testing"
    type: chapter
  - name: "Defining New Methods"
    type: section
  - name: "Flow of Execution"
    type: section
  - name: "Parameters and Arguments"
    type: section
  - name: "Multiple Parameters"
    type: section
  - name: "Stack Diagrams"
    type: section
  - name: "Math Methods"
    type: section
  - name: "Composition"
    type: section
  - name: "Return Values"
    type: section
  - name: "Incremental Development"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Conditionals and Logic"
    type: chapter
  - name: "Relational Operators"
    type: section
  - name: "The if-else Statement"
    type: section
  - name: "Chaining and Nesting"
    type: section
  - name: "The switch Statement"
    type: section
  - name: "Logical Operators"
    type: section
  - name: "De Morgan's Laws"
    type: section
  - name: "Boolean Variables"
    type: section
  - name: "Boolean Methods"
    type: section
  - name: "Validating Input"
    type: section
  - name: "Example Program"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Loops and Strings"
    type: chapter
  - name: "The while Statement"
    type: section
  - name: "Increment and Decrement"
    type: section
  - name: "The for Statement"
    type: section
  - name: "Nested Loops"
    type: section
  - name: "Characters"
    type: section
  - name: "Which Loop to Use"
    type: section
  - name: "String Iteration"
    type: section
  - name: "The indexOf Method"
    type: section
  - name: "Substrings"
    type: section
  - name: "String Comparison"
    type: section
  - name: "String Formatting"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays and References"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Creating Arrays"
    type: section
    transformations:
       - remove: 1
         position: 66
       - add:  |
                 Of course, you can also declare the variable and create the array with a [single line of code:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples1.java panel=0 ref="int size" count=4)

         position: 67
       - remove: 1
         position: 80
       - add:  |
                 You can initialize an array with a comma-separated sequence of elements enclosed in braces, [like this:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples1.java panel=0 ref="// displaying arrays" count=3)

         position: 81
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples1.java panel=0)
                 See the example java code in the left pane. To print the array using the printArray method, press the "Run!". Feel free to edit the existing array or create a new one. 
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples1.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples1 )

         position: 88
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples1.java"
            panel: 0
            action: open
  - name: "Accessing Elements"
    type: section
    transformations:
       - remove: 1
         position: 125
       - add:  |
                 You can use the `[]` operator anywhere in an [expression:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples2.java panel=0 ref="counts[0]" count=4)

         position: 126
       - remove: 1
         position: 146
       - add:  |
                 [For example:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples2.java panel=0 ref="// traversal with a while loop" count=6)

         position: 147
       - remove: 1
         position: 165
       - add:  |
                 This type of array processing is usually written as a [for loop:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples2.java panel=0 ref="// traversal with a for loop" count=4)

         position: 166
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples2.java panel=0)
                 See how the `printArray` function works by pressing "Run!".
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples3 )

         position: 120
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples2.java"
            panel: 0
            action: open
  - name: "Displaying Arrays"
    type: section
    transformations:
       - remove: 1
         position: 186
       - add:  |
                 For example, say you print an array [like this:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java panel=0 ref="// displaying" count=3)

         position: 187
       - remove: 1
         position: 201
       - add:  |
                 If we want to [display the elements of the array](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java panel=0 ref="* Prints the elements of an array." count=9), we can do it ourselves:

         position: 202
       - remove: 1
         position: 226
       - add:  |
                 After importing `Arrays`, we can invoke `toString` [like this:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java panel=0 ref="// printing with Arrays class" count=2)

         position: 227
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java panel=0)
                 Try it out here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples3 )

         position: 199
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java panel=0)
                 Try out the `printArray` function here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples3 )

         position: 221
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java panel=0)
                 Run your code here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples3 )

         position: 238
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples3.java"
            panel: 0
            action: open
  - name: "Copying Arrays"
    type: section
    transformations:
       - remove: 1
         position: 312
       - add:  |
                 We can do that by replacing the magic number, `3`, [with a.length:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples4.java panel=0 ref="// copying an array" count=6)

         position: 313
       - remove: 1
         position: 328
       - add:  |
                 Of course, we can replace the loop altogether by using `Arrays.copyOf` and `a.length` [for the second argument.](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples4.java panel=0 ref="// copying with Arrays class" count=2)

         position: 328
       - add:  |
                 Try adding the code snippets above to the editor on the left to see how the mechanics of copying arrays work. To print the arrays and see what changes you are making you can use the `printArray` method. Run your code here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples4.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples4 )

         position: 275
       - add:  |
                 Copy both of these methods to the panel on the left within the `main` method to give them a try. To print the arrays and see what changes you are making you can use the `printArray` method. Run your code here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples4.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples4 )

         position: 293
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples4.java panel=0)
                 Give both of the code snippets above a try by copying them to the `main` method on the left. To print the arrays and see what changes you are making you can use the `printArray` method. Run your code here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples4.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples4 )

         position: 335
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples4.java"
            panel: 0
            action: open
  - name: "Traversing Arrays"
    type: section
    transformations:
       - remove: 1
         position: 345
       - add:  |
                 Looping through the elements of an array is called a [traversal:](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java panel=0 ref="// traversing arrays" count=4)

         position: 346
       - remove: 1
         position: 360
       - add:  |
                 For example, [the following method](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java panel=0 ref="* Returns the index" count=11) takes an array and a value, and it returns the index where the value appears:

         position: 361
       - remove: 1
         position: 392
       - add:  |
                 [The following method](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java panel=0 ref="* Returns the total" count=10) takes an array and returns the sum of its elements:

         position: 393
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java panel=0)
                 Try it out yourself and don't forget to print the array using the `printArray` method. Run your code here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples5 )

         position: 355
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java panel=0)
                 Test it out in the main method of the code on the left. Run your code here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples5 )

         position: 388
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java panel=0)
                 Test it out in the main method of the code on the left. Run your code here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples5 )

         position: 411
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples5.java"
            panel: 0
            action: open
  - name: "Random Numbers"
    type: section
    transformations:
       - remove: 1
         position: 442
       - add:  |
                   [The following method](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/RandomNum.java panel=0 ref="* Returns an array of random integers." count=10) creates an `int` array and fills it with random numbers between 0 and 99.

         position: 443
       - remove: 1
         position: 456
       - add:  |
                   [The following main method](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/RandomNum.java panel=0 ref="public static void main" count=4) generates an array and displays it by using the `printArray` method from Section 7.3. 

         position: 457
       - add:  |
                   [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/RandomNum.java panel=0)
                   Try it out here.
                   {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/*.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ RandomNum )

         position: 443
       - add:  |
                   [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/RandomNum.java panel=0)
                   Try it out yourself here.
                   {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/*.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ RandomNum )

         position: 473
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/RandomNum.java"
            panel: 0
            action: open
  - name: "Building a Histogram"
    type: section
    transformations:
       - remove: 1
         position: 486
       - add:  |
                   [The following method](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/Histogram.java panel=0 ref="* Computes the number" count=11) takes an array and two integers.

         position: 487
       - remove: 1
         position: 508
       - add:  |
                   We add [the following code](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/Histogram.java panel=0 ref="int[] scores" count=6) to our `main` method:

         position: 509
       - remove: 1
         position: 555
       - add:  |
                   [This code](open_file codio-student-unit-exclude/ThinkJava2/code/ch07/Histogram.java panel=0 ref="// making a histogram" count=6) traverses the array of scores only once to generate the histogram:

         position: 556
       - add:  |
                 Putting together all the above code fragments, and adding some comments and test cases, see the complete example java code in the left pane. To compile and run the code, press "Run!"
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/*.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ Histogram )

         position: 568
       - add:  |
                 Try comparing the results from the `inRange` function calls and the `randomArray` named `scores` to see how this function works.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/*.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ Histogram )

         position: 503
       - add:  |
                 Try printing the array `counts` after running the above lines of code to see how a complete histogram is built up.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/*.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ Histogram )

         position: 565
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/Histogram.java"
            panel: 0
            action: open
  - name: "The Enhanced for Loop"
    type: section
    transformations:
       - remove: 1
         position: 600
       - add:  |
                   Using the enhanced `for` loop, and removing the temporary variable, [we can write the histogram code](open_file code/ch07/Histogram.java panel=0 ref="// histogram" count=5) from the previous section more concisely:

         position: 601
       - add:  |
                   Give the above enhanced for loop a try by pressing run and see what is printed.
                   {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples6.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ArrayExamples6 )

         position: 600
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ArrayExamples6.java"
            panel: 0
            action: open
  - name: "Counting Characters"
    type: section
    transformations:
       - remove: 1
         position: 633
       - add:  |
                   [We convert the string to lowercase,](open_file code/ch07/Doubloon.java panel=0 ref="// count the number" count=3) so that we can treat `'A'` and `'a'` (for example) as the same letter.

         position: 634
       - remove: 1
         position: 661
       - add:  |
                   We can simplify this code with an enhanced for loop, but it doesn’t work with strings; we have to convert lower to an array of characters, [like this:](open_file code/ch07/Doubloon.java panel=0 ref="// count the number" count=7)

         position: 662
       - remove: 1
         position: 670
       - add:  |
                   Once we have the counts, [we can use a second for loop](open_file code/ch07/Doubloon.java panel=0 ref="// determine whether the given word is a doubloon" count=8) to check whether each letter appears zero or two times:

         position: 671
       - remove: 1
         position: 684
       - add:  |
                 Pulling together the code fragments, and adding some comments and test cases, see the complete example java code in the left pane. To compile and run the code, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch07/Doubloon.java java -cp code/ch07/ Doubloon )

         position: 685
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/Doubloon.java"
            panel: 0
            action: open
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
    transformations:
       - remove: 143
         position: 785
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 7.1
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/Fruit.java"
            panel: 0
            action: open
  - name: Exercise 7.2
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/MakeDubMus.java"
            panel: 0
            action: open
  - name: Exercise 7.3
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 7.4
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 7.5
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 7.6
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 7.7
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java"
            panel: 0
            action: open   
  - name: Exercise 7.8
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java"
            panel: 0
            action: open          
  - name: "Recursive Methods"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Recursive Void Methods"
    type: section
    transformations:
       - remove: 1
         position: 19
       - add:  |
                   [Consider the following example:](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples1.java panel=0 ref="public static void countdown" count=8)

         position: 20
       - remove: 1
         position: 84
       - add:  |
                   A more general alternative would be [the following:](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples1.java panel=0 ref="public static void nLines" count=6)

         position: 85
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples1.java panel=0)
                 Give the function a try here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/Examples1.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ Examples1 )

         position: 66
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples1.java panel=0)
                 Give the `nLines` function a try here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/Examples1.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ Examples1 )

         position: 95
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/Examples1.java"
            panel: 0
            action: open
  - name: "Recursive Stack Diagrams"
    type: section
    transformations:
       - remove: 1
         position: 139
       - add:  |
                   For example, [here](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples2.java panel=0 ref="public static void forever" count=4) is a recursive method without a base case:

         position: 140
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples2.java panel=0)
                 Give the `nLines` function a try here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/Examples2.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ Examples2 )

         position: 152
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/Examples2.java"
            panel: 0
            action: open
  - name: "Value-Returning Methods"
    type: section
    transformations:
       - remove: 1
         position: 212
       - add:  |
                   If the argument happens to be 0, [we return 1:](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Series1.java panel=0 ref="public static int factorial" count=4)

         position: 213
       - remove: 1
         position: 223
       - add:  |
                   Otherwise, and this is the interesting part, [we have to make a recursive call](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Series1.java panel=0 ref="int recurse" count=3) to find the factorial of n−1, and then multiply it by n:

         position: 224
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Series1.java panel=0)
                 Pulling together all of the above code fragments, and adding some test cases, run the complete example java code in the left pane. To compile and run the code, press "Run!".
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/Series1.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ Series1 )

         position: 275
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/Series1.java"
            panel: 0
            action: open
  - name: "The Leap of Faith"
    type: section
    transformations:
       - remove: 1
         position: 344
       - add:  |
                   Translated into Java, [this function is as follows:](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Series2.java panel=0 ref="public static int fibonacci" count=6)

         position: 345
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Series2.java panel=0)
                 Run the complete example java code and fibonacci function in the left pane. To compile and run the code, press "Run!"
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/Series2.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ Series2 )

         position: 358
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/Series2.java"
            panel: 0
            action: open
  - name: "Counting Up Recursively"
    type: section
    transformations:
       - remove: 1
         position: 363
       - add:  |
                   What do you think happens if you reverse steps 2 and 3, [making the recursive call before displaying?](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples3.java panel=0 ref="public static void countup" count=8)

         position: 364
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples3.java panel=0)
                 Test and run both the `countup` and `countdown` functions here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/Examples3.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ Examples3 )

         position: 388
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/Examples3.java"
            panel: 0
            action: open
  - name: "Binary Number System"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Recursive Binary Method"
    type: section
    transformations:
       - remove: 1
         position: 499
       - add:  |
                   [Here](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples4.java panel=0 ref="public static void displayBinary" count=6) is a recursive method that displays any positive integer in binary:

         position: 500
       - add:  |
                 [Remove highlighting](open_file codio-student-unit-exclude/ThinkJava2/code/ch08/Examples4.java panel=0)
                 Test and run the code here.
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/Examples4.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ Examples4 )

         position: 535
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/Examples4.java"
            panel: 0
            action: open
  - name: "CodingBat Problems"
    type: section
    transformations:
       - remove: 1
         position: 550
       - add:  |
                 The first problem is available at [https://codingbat.com/prob/p118230](open_preview https://codingbat.com/prob/p118230).
                 Try solving the first challenge in CodingBat's online text editor.

         position: 551
       - remove: 1
         position: 608
       - add:  |
                 The second problem is available at [https://codingbat.com/prob/p135988](open_preview https://codingbat.com/prob/p135988).
                 Try solving the second challenge in CodingBat's online text editor.

         position: 609
       - add:  |
                 See both solved CodingBat problems in java in the left pane. To compile and run the code, press "Run!"
                 {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/CodingBat.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ CodingBat )

         position: 654
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/CodingBat.java"
            panel: 0
            action: open
  - name: "Vocabulary"
    type: section
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
    transformations:
       - remove: 221
         position: 701
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: Exercise 8.1
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 8.2
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 8.3
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 8.4
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 8.5
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 8.6
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java"
            panel: 0
            action: open
  - name: Exercise 8.7
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "codio-student-unit-exclude/ThinkJava2/code/ch08/Recurse.java"
            panel: 0
            action: open
  - name: "Immutable Objects"
    type: chapter
  - name: "Primitives vs Objects"
    type: section
  - name: "The null Keyword"
    type: section
  - name: "Strings Are Immutable"
    type: section
  - name: "Wrapper Classes"
    type: section
  - name: "Command-Line Arguments"
    type: section
  - name: "Argument Validation"
    type: section
  - name: "BigInteger Arithmetic"
    type: section
  - name: "Incremental Design"
    type: section
  - name: "More Generalization"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Mutable Objects"
    type: chapter
  - name: "Point Objects"
    type: section
  - name: "Objects as Parameters"
    type: section
  - name: "Objects as Return Values"
    type: section
  - name: "Rectangles Are Mutable"
    type: section
  - name: "Aliasing Revisited"
    type: section
  - name: "Java Library Source"
    type: section
  - name: "Class Diagrams"
    type: section
  - name: "Scope Revisited"
    type: section
  - name: "Garbage Collection"
    type: section
  - name: "Mutable vs Immutable"
    type: section
  - name: "StringBuilder Objects"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Designing Classes"
    type: chapter
  - name: "The Time Class"
    type: section
  - name: "Constructors"
    type: section
  - name: "Value Constructors"
    type: section
  - name: "Getters and Setters"
    type: section
  - name: "Displaying Objects"
    type: section
  - name: "The toString Method"
    type: section
  - name: "The equals Method"
    type: section
  - name: "Adding Times"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Objects"
    type: chapter
  - name: "Card Objects"
    type: section
  - name: "Card toString"
    type: section
  - name: "Class Variables"
    type: section
  - name: "The compareTo Method"
    type: section
  - name: "Cards Are Immutable"
    type: section
  - name: "Arrays of Cards"
    type: section
  - name: "Sequential Search"
    type: section
  - name: "Binary Search"
    type: section
  - name: "Tracing the Code"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Objects of Arrays"
    type: chapter
  - name: "Decks of Cards"
    type: section
  - name: "Shuffling Decks"
    type: section
  - name: "Selection Sort"
    type: section
  - name: "Merge Sort"
    type: section
  - name: "Subdecks"
    type: section
  - name: "Merging Decks"
    type: section
  - name: "Adding Recursion"
    type: section
  - name: "Static Context"
    type: section
  - name: "Piles of Cards"
    type: section
  - name: "Playing War"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Extending Classes"
    type: chapter
  - name: "CardCollection"
    type: section
  - name: "Inheritance"
    type: section
  - name: "Dealing Cards"
    type: section
  - name: "The Player Class"
    type: section
  - name: "The Eights Class"
    type: section
  - name: "Class Relationships"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Arrays"
    type: chapter
  - name: "Conway's Game of Life"
    type: section
  - name: "The Cell Class"
    type: section
  - name: "Two-Dimensional Arrays"
    type: section
  - name: "The GridCanvas Class"
    type: section
  - name: "Other Grid Methods"
    type: section
  - name: "Starting the Game"
    type: section
  - name: "The Simulation Loop"
    type: section
  - name: "Exception Handling"
    type: section
  - name: "Counting Neighbors"
    type: section
  - name: "Updating the Grid"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Reusing Classes"
    type: chapter
  - name: "Langton's Ant"
    type: section
  - name: "Refactoring"
    type: section
  - name: "Abstract Classes"
    type: section
  - name: "UML Diagram"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Advanced Topics"
    type: chapter
  - name: "Polygon Objects"
    type: section
  - name: "Adding Color"
    type: section
  - name: "Regular Polygons"
    type: section
  - name: "More Constructors"
    type: section
  - name: "An Initial Drawing"
    type: section
  - name: "Blinking Polygons"
    type: section
  - name: "Interfaces"
    type: section
  - name: "Event Listeners"
    type: section
  - name: "Timers"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Tools"
    type: chapter
  - name: "Installing DrJava"
    type: section
  - name: "DrJava Interactions"
    type: section
  - name: "Command-Line Interface"
    type: section
  - name: "Command-Line Testing"
    type: section
  - name: "Running Checkstyle"
    type: section
  - name: "Tracing with a Debugger"
    type: section
  - name: "Testing with JUnit"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Javadoc"
    type: chapter
  - name: "Reading Documentation"
    type: section
  - name: "Writing Documentation"
    type: section
  - name: "Javadoc Tags"
    type: section
  - name: "Example Source File"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Graphics"
    type: chapter
  - name: "Creating Graphics"
    type: section
  - name: "Graphics Methods"
    type: section
  - name: "Example Drawing"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Debugging"
    type: chapter
  - name: "Compile-Time Errors"
    type: section
  - name: "Run-Time Errors"
    type: section
  - name: "Logic Errors"
    type: section
insert_sections:
  - name: Exercise 7.1
    type: section
    chapter: Arrays and References
    section: Exercises
    before: false
    markdown: |
      **Exercise 7.1:**
      The purpose of this exercise is to practice reading code and recognizing the traversal patterns in this chapter. The following methods are hard to read, because instead of using meaningful names for the variables and methods, they use names of fruit.
      
      For each method, write one sentence that describes what the method does, without getting into the details of how it works. And for each variable, identify the role it plays.

      ```code
      public static int banana(int[] a) {
          int kiwi = 1;
          int i = 0;
          while (i < a.length) {
              kiwi = kiwi * a[i];
              i++;
          }
          return kiwi;
      }
      ```

      ```code
      public static int grapefruit(int[] a, int grape) {
          for (int i = 0; i < a.length; i++) {
              if (a[i] == grape) {
                  return i;
              }
          }
          return -1;
      }
      ```

      ```code
      public static int pineapple(int[] a, int apple) {
          int pear = 0;
          for (int pine: a) {
              if (pine == apple) {
                  pear++;
              }
          }
          return pear;
      }
      ```
      Test out these functions here by adding your own test cases.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/Fruit.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ Fruit )
  - name: Exercise 7.2
    type: section
    chapter: Arrays and References
    section: Exercises
    before: false
    markdown: |
      **Exercise 7.2:**
      What is the output of the following program? Describe in a few words what `mus` does. Draw a stack diagram just before `mus` returns.

      ```code
      public static int[] make(int n) {
          int[] a = new int[n];
          for (int i = 0; i < n; i++) {
              a[i] = i + 1;
          }
          return a;
      }
      ```

      ```code
      public static void dub(int[] jub) {
          for (int i = 0; i < jub.length; i++) {
              jub[i] *= 2;
          }
      }
      ```

      ```code
      public static int mus(int[] zoo) {
          int fus = 0;
          for (int i = 0; i < zoo.length; i++) {
              fus += zoo[i];
          }
          return fus;
      }
      ```

      ```code
      public static void main(String[] args) {
          int[] bob = make(5);
          dub(bob);
          System.out.println(mus(bob));
      }
      ```
      Test out these functions here by adding your own test cases.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/MakeDubMus.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ MakeDubMus )
  - name: Exercise 7.3
    type: section
    chapter: Arrays and References
    section: Exercises
    before: false
    markdown: |
      **Exercise 7.3:**
      Write a method called `indexOfMax` that takes an array of integers and returns the index of the largest element.
      Can you write this method by using an enhanced `for` loop? Why or why not?
      Once you have written your function and added test cases, run your code here.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ExerciseScript )
  - name: Exercise 7.4
    type: section
    chapter: Arrays and References
    section: Exercises
    before: false
    markdown: |
      **Exercise 7.4:**
      The Sieve of Eratosthenes is “a simple, ancient algorithm for finding all prime numbers up to any given limit” ([https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)).
      Once you have written your function and added test cases, run your code here.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ExerciseScript )
  - name: Exercise 7.5
    type: section
    chapter: Arrays and References
    section: Exercises
    before: false
    markdown: | 
      **Exercise 7.5:**
      Write a method named `areFactors` that takes an integer `n` and an array of integers, and returns `true` if the numbers in the array are all factors of `n` (which is to say that `n` is divisible by all of them).
      Once you have written your function and added test cases, run your code here.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ExerciseScript )
  - name: Exercise 7.6
    type: section
    chapter: Arrays and References
    section: Exercises
    before: false
    markdown: |
      **Exercise 7.6:**
      Write a method named `arePrimeFactors` that takes an integer `n` and an array of integers, and that returns `true` if the numbers in the array are all prime *and* their product is `n`.
      Once you have written your function and added test cases, run your code here.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ExerciseScript )
  - name: Exercise 7.7
    type: section
    chapter: Arrays and References
    section: Exercises
    before: false
    markdown: |
      **Exercise 7.7:**
      Write a method called `letterHist` that takes a string as a parameter and returns a histogram of the letters in the string.
      The zeroth element of the histogram should contain the number of a's in the string (upper- and lowercase); the 25th element should contain the number of z's. 
      Your solution should traverse the string only once.
      Once you have written your function and added test cases, run your code here.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ExerciseScript )
  - name: Exercise 7.8
    type: section
    chapter: Arrays and References
    section: Exercises
    before: false
    markdown: |
      **Exercise 7.8:**
      Two words are anagrams if they contain the same letters and the same number of each letter.
      For example, “stop” is an anagram of “pots”, “allen downey” is an anagram of “well annoyed”, and “christopher mayfield” is an anagram of “hi prof the camel is dry”.
      Write a method that takes two strings and checks whether they are anagrams of each other.
      Once you have written your function and added test cases, run your code here.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch07/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch07/ ExerciseScript )
  - name: Exercise 8.1
    type: section
    chapter: Recursive Methods
    section: Exercises
    before: false
    markdown: |
      **Exercise 8.1:**
      The purpose of this exercise is to take a problem and break it into smaller problems, and to solve the smaller problems by writing simple methods. Consider the first verse of the song “99 Bottles of Beer”:



      > 99 bottles of beer on the wall,<br/>
      > 99 bottles of beer,<br/>
      > ya' take one down, ya' pass it around,<br/>
      > 98 bottles of beer on the wall.


      Subsequent verses are identical except that the number of bottles gets smaller by one in each verse, until the last verse:



      > No bottles of beer on the wall,<br/>
      > no bottles of beer,<br/>
      > ya' can't take one down, ya' can't pass it around,<br/>
      > 'cause there are no more bottles of beer on the wall!


      And then the song (finally) ends.

      Write a program that displays the entire lyrics of “99 Bottles of Beer”. 
      Your program should include a recursive method that does the hard part, but you might want to write additional methods to separate other parts of the program.
      As you develop your code, test it with a small number of verses, like `3`.
      Once you have written your function and added test cases, run your code here.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ ExerciseScript )
  - name: Exercise 8.2
    type: section
    chapter: Recursive Methods
    section: Exercises
    before: false
    markdown: |
      **Exercise 8.2:**
      Write a recursive method named `oddSum` that takes a positive odd integer `n` and returns the sum of odd integers from 1 to `n`.
      Start with a base case, and use temporary variables to debug your solution.
      You might find it helpful to print the value of `n` each time `oddSum` is invoked.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ ExerciseScript )
  - name: Exercise 8.3
    type: section
    chapter: Recursive Methods
    section: Exercises
    before: false
    markdown: |
      **Exercise 8.3:**
      In this exercise, you will use a stack diagram to understand the execution of the following recursive method:

      ```code
      public static void main(String[] args) {
          System.out.println(prod(1, 4));
      }

      public static int prod(int m, int n) {
          if (m == n) {
              return n;
          } else {
              int recurse = prod(m, n - 1);
              int result = n * recurse;
              return result;
          }
      }
      ```



      1. Draw a stack diagram showing the state of the program just before the last invocation of `prod` completes.
      1. What is the output of this program? (Try to answer this question on paper first; then run the code to check your answer.)
      1. Explain in a few words what `prod` does (without getting into the details of how it works).
      1. Rewrite `prod` without the temporary variables `recurse` and `result`. *Hint:* You need only one line for the `else` branch.
      
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ ExerciseScript )
  - name: Exercise 8.4
    type: section
    chapter: Recursive Methods
    section: Exercises
    before: false
    markdown: |
      **Exercise 8.4:**
      The goal of this exercise is to translate a recursive definition into a Java method. The Ackermann function is defined for non-negative integers as follows:
      $$
      A(m, n) = \begin{cases}
                    n+1 & \mbox{if } m = 0 \\
              A(m-1, 1) & \mbox{if } m > 0 \mbox{ and } n = 0 \\
      A(m-1, A(m, n-1)) & \mbox{if } m > 0 \mbox{ and } n > 0
      \end{cases}
      $$

      Write a recursive method called `ack` that takes two `int`s as parameters and that computes and returns the value of the Ackermann function.

      Test your implementation of Ackermann by invoking it from `main` and displaying the return value.
      Note the return value gets very big very quickly.
      You should try it only for small values of $m$ and $n$ (not bigger than 3).
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ ExerciseScript )
  - name: Exercise 8.5
    type: section
    chapter: Recursive Methods
    section: Exercises
    before: false
    markdown: |
      Write a recursive method called `power` that takes a double `x` and an integer `n` and returns $x^n$.

      *Hint:* A recursive definition of this operation is $x^n = x \cdot x^{n-1}$. Also, remember that anything raised to the zeroth power is 1.

      Optional challenge: you can make this method more efficient, when `n` is even, using $x^n = \left( x^{n/2} \right)^2$.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ ExerciseScript )
  - name: Exercise 8.6
    type: section
    chapter: Recursive Methods
    section: Exercises
    before: false
    markdown: |
      **Exercise 8.6:**
      Many of the patterns you have seen for traversing arrays can also be written recursively. It is not common, but it is a useful exercise.



      1. Write a method called `maxInRange` that takes an array of integers and two indexes, `lowIndex` and `highIndex`, and finds the maximum value in the array, but considering only the elements between `lowIndex` and `highIndex`, including both. This method should be recursive. If the length of the range is 1 (i.e., if `lowIndex == highIndex`), we know immediately that the sole element in the range must be the maximum. So that's the base case. If there is more than one element in the range, we can break the array into two pieces, find the maximum in each piece, and then find the maximum of the maxima.
      1. Methods like `maxInRange` can be awkward to use. To find the largest element in an array, we have to provide the range for the entire array: ```code
      double max = maxInRange(a, 0, a.length - 1);
      ``` Write a method called `max` that takes an array and uses `maxInRange` to find and return the largest element.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/ExerciseScript.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ ExerciseScript )
  - name: Exercise 8.7
    type: section
    chapter: Recursive Methods
    section: Exercises
    before: false
    markdown: |
      **Exercise 8.7:**
      Create a program called *Recurse.java* and type in the following methods:

      ```code
      /**
       * Returns the first character of the given String.
       */
      public static char first(String s) {
          return s.charAt(0);
      }
      ```

      ```code
      /**
       * Returns all but the first letter of the given String.
       */
      public static String rest(String s) {
          return s.substring(1);
      }
      ```

      ```code
      /**
       * Returns all but the first and last letter of the String.
       */
      public static String middle(String s) {
          return s.substring(1, s.length() - 1);
      }
      ```

      ```code
      /**
       * Returns the length of the given String.
       */
      public static int length(String s) {
          return s.length();
      }
      ```



      1. Write some code in `main` that tests each of these methods. Make sure they work, and you understand what they do.
      1. Using these methods, and without using any other `String` methods, write a method called `printString` that takes a string as a parameter and displays the letters of the string, one on each line. It should be a `void` method.
      1. Again using only these methods, write a method called `printBackward` that does the same thing as `printString` but displays the string backward (again, one character per line).
      1. Now write a method called `reverseString` that takes a string as a parameter and returns a new string as a return value. The new string should contain the same letters as the parameter, but in reverse order: ```code
      String backwards = reverseString("coffee");
      System.out.println(backwards);
      ``` The output of this example code should be as follows: ```code
      eeffoc
      ```
      1. A palindrome is a word that reads the same both forward and backward, like “otto” and “palindromeemordnilap”. Here's one way to test whether a string is a palindrome: 

      > A single letter is a palindrome, a two-letter word is a palindrome if the letters are the same, and any other word is a palindrome if the first letter is the same as the last and the middle is a palindrome.
       Write a recursive method named `isPalindrome` that takes a `String` and returns a `boolean` indicating whether the word is a palindrome.
      {Run!}(sh .guides/bg.sh javac codio-student-unit-exclude/ThinkJava2/code/ch08/Recurse.java java -cp codio-student-unit-exclude/ThinkJava2/code/ch08/ Recurse )