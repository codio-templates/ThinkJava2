workspace:
  directory: /home/codio/workspace/codio-student-unit-exclude/ThinkJava2
  tex: thinkjava2.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
  suppressPageNumbering: true
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
 - code
 - fig: "*.jpg"
sections:
  - name: "Preface"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Philosophy Behind the Book"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Object-Oriented Programming"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Changes to the Second Edition"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "About the Appendixes"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Using the Code Examples"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Acknowledgments"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Computer Programming"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is a Computer?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is Programming?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Hello World Program"
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
                 See the example java code in the left pane. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello.java java -cp code/ch01/ Hello )

          position: 105
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello.java"
            panel: 0
            action: open
  - name: "Compiling Java Programs"
    type: section
  - name: "Displaying Two Messages"
    type: section
  - name: "Formatting Source Code"
    type: section
  - name: "Using Escape Sequences"
    type: section
  - name: "What Is Computer Science?"
    type: section
  - name: "Debugging Programs"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Variables and Operators"
    type: chapter
  - name: "Declaring Variables"
    type: section
  - name: "Assigning Variables"
    type: section
  - name: "Memory Diagrams"
    type: section
  - name: "Printing Variables"
    type: section
  - name: "Arithmetic Operators"
    type: section
  - name: "Floating-Point Numbers"
    type: section
  - name: "Rounding Errors"
    type: section
  - name: "Operators for Strings"
    type: section
  - name: "Compiler Error Messages"
    type: section
  - name: "Other Types of Errors"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Input and Output"
    type: chapter
  - name: "The System Class"
    type: section
  - name: "The Scanner Class"
    type: section
  - name: "Language Elements"
    type: section
  - name: "Literals and Constants"
    type: section
  - name: "Formatting Output"
    type: section
  - name: "Reading Error Messages"
    type: section
  - name: "Type Cast Operators"
    type: section
  - name: "Remainder Operator"
    type: section
  - name: "Putting It All Together"
    type: section
  - name: "The Scanner Bug"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Methods and Testing"
    type: chapter
  - name: "Defining New Methods"
    type: section
  - name: "Flow of Execution"
    type: section
  - name: "Parameters and Arguments"
    type: section
  - name: "Multiple Parameters"
    type: section
  - name: "Stack Diagrams"
    type: section
  - name: "Math Methods"
    type: section
  - name: "Composition"
    type: section
  - name: "Return Values"
    type: section
  - name: "Incremental Development"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Conditionals and Logic"
    type: chapter
  - name: "Relational Operators"
    type: section
  - name: "The if-else Statement"
    type: section
  - name: "Chaining and Nesting"
    type: section
  - name: "The switch Statement"
    type: section
  - name: "Logical Operators"
    type: section
  - name: "De Morgan's Laws"
    type: section
  - name: "Boolean Variables"
    type: section
  - name: "Boolean Methods"
    type: section
  - name: "Validating Input"
    type: section
  - name: "Example Program"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Loops and Strings"
    type: chapter
  - name: "The while Statement"
    type: section
  - name: "Increment and Decrement"
    type: section
  - name: "The for Statement"
    type: section
  - name: "Nested Loops"
    type: section
  - name: "Characters"
    type: section
  - name: "Which Loop to Use"
    type: section
  - name: "String Iteration"
    type: section
  - name: "The indexOf Method"
    type: section
  - name: "Substrings"
    type: section
  - name: "String Comparison"
    type: section
  - name: "String Formatting"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays and References"
    type: chapter
  - name: "Creating Arrays"
    type: section
  - name: "Accessing Elements"
    type: section
  - name: "Displaying Arrays"
    type: section
  - name: "Copying Arrays"
    type: section
  - name: "Traversing Arrays"
    type: section
  - name: "Random Numbers"
    type: section
  - name: "Building a Histogram"
    type: section
  - name: "The Enhanced for Loop"
    type: section
  - name: "Counting Characters"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Recursive Methods"
    type: chapter
  - name: "Recursive Void Methods"
    type: section
  - name: "Recursive Stack Diagrams"
    type: section
  - name: "Value-Returning Methods"
    type: section
  - name: "The Leap of Faith"
    type: section
  - name: "Counting Up Recursively"
    type: section
  - name: "Binary Number System"
    type: section
  - name: "Recursive Binary Method"
    type: section
  - name: "CodingBat Problems"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Immutable Objects"
    type: chapter
  - name: "Primitives vs Objects"
    type: section
  - name: "The null Keyword"
    type: section
  - name: "Strings Are Immutable"
    type: section
  - name: "Wrapper Classes"
    type: section
  - name: "Command-Line Arguments"
    type: section
  - name: "Argument Validation"
    type: section
  - name: "BigInteger Arithmetic"
    type: section
  - name: "Incremental Design"
    type: section
  - name: "More Generalization"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Mutable Objects"
    type: chapter
  - name: "Point Objects"
    type: section
  - name: "Objects as Parameters"
    type: section
  - name: "Objects as Return Values"
    type: section
  - name: "Rectangles Are Mutable"
    type: section
  - name: "Aliasing Revisited"
    type: section
  - name: "Java Library Source"
    type: section
  - name: "Class Diagrams"
    type: section
  - name: "Scope Revisited"
    type: section
  - name: "Garbage Collection"
    type: section
  - name: "Mutable vs Immutable"
    type: section
  - name: "StringBuilder Objects"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Designing Classes"
    type: chapter
  - name: "The Time Class"
    type: section
  - name: "Constructors"
    type: section
  - name: "Value Constructors"
    type: section
  - name: "Getters and Setters"
    type: section
  - name: "Displaying Objects"
    type: section
  - name: "The toString Method"
    type: section
  - name: "The equals Method"
    type: section
  - name: "Adding Times"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Objects"
    type: chapter
  - name: "Card Objects"
    type: section
  - name: "Card toString"
    type: section
  - name: "Class Variables"
    type: section
  - name: "The compareTo Method"
    type: section
  - name: "Cards Are Immutable"
    type: section
  - name: "Arrays of Cards"
    type: section
  - name: "Sequential Search"
    type: section
  - name: "Binary Search"
    type: section
  - name: "Tracing the Code"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Objects of Arrays"
    type: chapter
  - name: "Decks of Cards"
    type: section
  - name: "Shuffling Decks"
    type: section
  - name: "Selection Sort"
    type: section
  - name: "Merge Sort"
    type: section
  - name: "Subdecks"
    type: section
  - name: "Merging Decks"
    type: section
  - name: "Adding Recursion"
    type: section
  - name: "Static Context"
    type: section
  - name: "Piles of Cards"
    type: section
  - name: "Playing War"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Extending Classes"
    type: chapter
  - name: "CardCollection"
    type: section
  - name: "Inheritance"
    type: section
  - name: "Dealing Cards"
    type: section
  - name: "The Player Class"
    type: section
  - name: "The Eights Class"
    type: section
  - name: "Class Relationships"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Arrays"
    type: chapter
  - name: "Conway's Game of Life"
    type: section
  - name: "The Cell Class"
    type: section
  - name: "Two-Dimensional Arrays"
    type: section
  - name: "The GridCanvas Class"
    type: section
  - name: "Other Grid Methods"
    type: section
  - name: "Starting the Game"
    type: section
  - name: "The Simulation Loop"
    type: section
  - name: "Exception Handling"
    type: section
  - name: "Counting Neighbors"
    type: section
  - name: "Updating the Grid"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Reusing Classes"
    type: chapter
  - name: "Langton's Ant"
    type: section
  - name: "Refactoring"
    type: section
  - name: "Abstract Classes"
    type: section
  - name: "UML Diagram"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Advanced Topics"
    type: chapter
  - name: "Polygon Objects"
    type: section
  - name: "Adding Color"
    type: section
  - name: "Regular Polygons"
    type: section
  - name: "More Constructors"
    type: section
  - name: "An Initial Drawing"
    type: section
  - name: "Blinking Polygons"
    type: section
  - name: "Interfaces"
    type: section
  - name: "Event Listeners"
    type: section
  - name: "Timers"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Tools"
    type: chapter
  - name: "Installing DrJava"
    type: section
  - name: "DrJava Interactions"
    type: section
  - name: "Command-Line Interface"
    type: section
  - name: "Command-Line Testing"
    type: section
  - name: "Running Checkstyle"
    type: section
  - name: "Tracing with a Debugger"
    type: section
  - name: "Testing with JUnit"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Javadoc"
    type: chapter
    transformations:
        - remove: 1
          position: 13
        - add:  |
                Also known as traditional comments, these start with `//` and generally contain short phrases that explain specific lines of code.
          position: 14
        - remove: 1
          position: 18
        - add:  |
                These start with `/*` and end with `*/`, and are typically used for copyright statements.
          position: 19
        - remove: 1
          position: 21
        - add:  |
                These start with `/**` and end with `*/`, and describe what each class and method does.
          position: 22
        - remove: 1
          position: 40
        - add:  |
                In fact, the official documentation for the Java library, which can be found [here](open_preview https://thinkjava.org/apidoc panel=0), is generated by Javadoc.
          position: 41
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Reading Documentation"
    type: section
    transformations:
        - remove: 10
          position: 52
        - add:  |
                You can see the documentation on the web page at the left.
          position: 62
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "#preview: https://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html"
            panel: 0
            action: open
  - name: "Writing Documentation"
    type: section
    transformations:
        - remove: 1
          position: 152
        - add:  |
                They begin with `/**` (two stars) and end with `*/` (one star).
          position: 153
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Javadoc Tags"
    type: section
    transformations:
        - remove: 1
          position: 199
        - add:  |
                For example, we can use `@author` and `@version` to provide information about the class, as shown below and [at the left](open_file code/appb/DigitUtil.java panel=0 ref="*" count=7)
                [Click to remove highlight](open_file code/appb/DigitUtil.java panel=0)
          position: 200
        - remove: 1
          position: 214
        - add:  |
                 These two sections are separated by a blank line (not counting the `*`).
          position: 215
        - remove: 1
          position: 216
        - add:  |
                For methods, we can use `@param` and `@return` to provide information about parameters and return values, as shown below and [at the left](open_file code/appb/DigitUtil.java panel=0 ref="Tests" count=6)
                [Click to remove highlight](open_file code/appb/DigitUtil.java panel=0)
          position: 217
        - remove: 1
          position: 246
        - add:  |
                 Comments like `@return boolean` are not useful, because you already know the return type from the method's signature.
          position: 247
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/appb/DigitUtil.java"
            panel: 0
            action: open
  - name: "Example Source File"
    type: section
    transformations:
        - remove: 2
          position: 256
        - remove: 1
          position: 262
        - add:  |
                Our example source file, `Convert.java`, includes [the MIT License](https://opensource.org/licenses/MIT)
                The MIT License is also mentioned [at the start of the code file](open_file code/appb/Convert.java panel=0 ref="*" count=22)
                [Click to remove highlight](open_file code/appb/Convert.java panel=0)
          position: 263
        - remove: 1
          position: 266
        - remove: 1
          position: 290
        - remove: 1
          position: 294
        - add:  |
                After that, we can define the class itself and begin writing the documentation (`**`), as shown [at the left](open_file code/appb/Convert.java panel=0 ref="import" count=10)
                [Click to remove highlight](open_file code/appb/Convert.java panel=0)
          position: 295
        - remove: 1
          position: 311
        - add:  |
                To avoid this issue, always make the end of the comment (the `*/`) 'touch' the word \java{public}.
          position: 312
        - remove: 1
          position: 314
        - add:  |
                There is no need to write documentation for the constants -- the code [at the left](open_file code/appb/Convert.java panel=0 ref="final" count=3) is self-explanatory.
                [Click to remove highlight](open_file code/appb/Convert.java panel=0)
          position: 315
        - add:  |
                The `main` method can also be viewed [here](open_file code/appb/Convert.java panel=0 ref="Tests" count=24)
                [Click to remove highlight](open_file code/appb/Convert.java panel=0)
          position: 353 
        - remove: 17
          position: 382
        - add: |
                Click the button below to run the Javadoc tool on this example program.

                {Document!}(javadoc -d doc code/appb/Convert.java)
                
                For reference, the command being run is below. When using this command in the future, make sure you're in the same directory as the file you wish to document.
                
                ```
                javadoc -d doc Convert.java
                ```
                
                [View document](open_preview doc/Convert.html panel=0)

          position: 399
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/appb/Convert.java"
            panel: 0
            action: open
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Graphics"
    type: chapter
    transformations:
        - remove: 1
          position: 10
        - add:  |
                You can read more about it in the Java tutorials [here](open_preview https://thinkjava.org/java2d panel=0).
          position: 11
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close    
  - name: "Creating Graphics"
    type: section
    transformations:
        - remove: 1
          position: 22
        - add:  |
                At the left and below, we can see an example program that draws a circle by using the `fillOval` method:
          position: 23
        - remove: 3
          position: 30
        - remove: 1
          position: 50
        - add:  |
                You can read about the other methods in the documentation, which you can find by doing a web search for "Java Canvas".
          position: 51
        - remove: 12
          position: 53
        - add:  |
                In the `main` method, we do the following:
                1. [Create a `JFrame` object](open_file code/appc/Drawing.java panel=0 ref="new JFrame" count=2), which is the window that will contain the canvas.
                1. [Create a `Drawing` object](open_file code/appc/Drawing.java panel=0 ref="Canvas drawing" count=2) (which is the canvas), set its width and height, and add it to the frame.
                1. [Pack the frame](open_file code/appc/Drawing.java panel=0 ref="frame.add" count=3) (resize it) to fit the canvas, and display it on the screen.
                [Click to remove highlights](open_file code/appc/Drawing.java panel=0)
          position: 65
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/appc/Drawing.java"
            panel: 0
            action: open
  - name: "Graphics Methods"
    type: section
    transformations:
        - remove: 1
          position: 123
        - add:  |
                To choose the color of a shape, invoke `setColor` on the `Graphics` object, as shown [at the left.](open_file code/appc/Drawing.java panel=0 ref="setColor" count=1)
                [Click to remove highlight](open_file code/appc/Drawing.java panel=0)
          position: 124
        - remove: 1
          position: 141
        - add:  |
                See the example [at the left.](open_file code/appc/Drawing.java panel=0 ref="purple" count=1)
                [Click to remove highlight](open_file code/appc/Drawing.java panel=0)
          position: 142
        - remove: 1
          position: 97
        - add:  |
                [The previous example](open_file code/appc/Drawing.java panel=0 ref="fillOval" count=1) used `fillOval`, which has the following signature:
                [Click to remove highlight](open_file code/appc/Drawing.java panel=0)
          position: 98
        - remove: 1
          position: 150
        - add:  |
                You can set the background color of the `Canvas` by invoking `setBackground`, as shown [here](open_file code/appc/Drawing.java panel=0 ref="setBackground" count=1).
                [Click to remove highlight](open_file code/appc/Drawing.java panel=0)
          position: 151
        - remove: 3
          position: 152
        - add:  |
                ```
                 this.setBackground(Color.WHITE);
                ```
                Note that the keyword `this` is used to represent the `Canvas` object. This is correct because the `paint()` method is called on `Drawing` objects, which are a type of `Canvas`. The methods called from `main` work such that `paint` is called behind the scenes on the instance `drawing`. 
                Test the code using the "Try It!" button below. 

                {Try It!}(bash .guides/swing.sh cd code/appc javac Drawing.java java Drawing )

                If the display doesn't appear in the bottom left corner, click [here.](open_preview https://{{domain3000}} panel=1)
          position: 155
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/appc/Drawing.java"
            panel: 0
            action: open
          - path: "#preview: https://{{domain3000}}"
            panel: 1
            action: open
  - name: "Example Drawing"
    type: section
    transformations:
        - remove: 1
          position: 161
        - add:  |
                Suppose we want to draw a "Hidden Mickey," which is an icon that represents Mickey Mouse (see [here](open_preview https://en.wikipedia.org/wiki/Hidden_Mickey panel=0)).
          position: 162
        - remove: 1
          position: 165
        - add:  |
                Here's a method that takes a \java{Rectangle} and invokes \java{fillOval}, shown [at the left:](open_file code/appc/Mickey.java panel=0 ref="boxOval" count=3)
          position: 166
        - remove: 1
          position: 173
        - add:  |
                And here's a method that draws Mickey Mouse, also seen [at the left: ](open_file code/appc/Mickey.java panel=0 ref="void mickey" count=13)
          position: 174
        - add:  |
                Test the code using the "Try It!" button below.

                {Try It!}(bash .guides/swing.sh cd code/appc javac Mickey.java java Mickey )

                If the display doesn't appear in the bottom left corner, click [here.](open_preview https://{{domain3000}} panel=1)
          position: 207
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/appc/Mickey.java"
            panel: 0
            action: open
          - path: "#preview: https://{{domain3000}}"
            panel: 1
            action: open
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close 
  - name: "Exercises"
    type: section
    transformations:
        - remove: 64
          position: 232
        - add:  |
                The following exercises will help you solidify your knowledge of graphics and experiment with different techniques.
          position: 296
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close 
  - name: "Exercise 20.1"
    type: section
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/appc/Exercise1.java"
            panel: 0
            action: open
          - path: "#preview: https://{{domain3000}}"
            panel: 1
            action: open 
  - name: "Exercise 20.2"
    type: section
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/appc/Mickey.java"
            panel: 0
            action: open
          - path: "#preview: https://{{domain3000}}"
            panel: 1
            action: open 
  - name: "Exercise 20.3"
    type: section
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/appc/Moire.java"
            panel: 0
            action: open
          - path: "#preview: https://{{domain3000}}"
            panel: 1
            action: open 
  - name: "Debugging"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close 
  - name: "Compile-Time Errors"
    type: section
    transformations:
        - remove: 1
          position: 149
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close 
  - name: "Run-Time Errors"
    type: section
    transformations:
        - remove: 1
          position: 206
        - add:  |
                Suppose we want to draw a "Hidden Mickey," which is an icon that represents Mickey Mouse (see [here](open_preview https://en.wikipedia.org/wiki/Hidden_Mickey panel=0)).
          position: 207
        - remove: 1
          position: 206
        - add:  |
                **Infinite loop**
          position: 207
        - remove: 1
          position: 229
        - add:  |
                **Infinite recursion**
          position: 230
        - remove: 1
          position: 248
        - add:  |
                **Flow of execution**
          position: 249
        - remove: 1
          position: 279
        - add:  |
                For example, this code causes a `NullPointerException`:
                
                
          position: 280
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close 
  - name: "Logic Errors"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close 
insert_sections:
  - name: Exercise 20.1
    type: section
    chapter: Graphics
    section: Exercises
    before: false
    latex: |
      Draw the flag of Japan: a red circle on a white background that is wider than it is tall.
      Test the code using the "Try It!" button below.

      {Try It!}(bash .guides/swing.sh cd code/appc javac Exercise1.java java Exercise1 )

      If the display doesn't appear in the bottom left corner, click [here.](open_preview https://{{domain3000}} panel=1)

  - name: Exercise 20.2
    type: section
    chapter: Graphics
    section: Exercises
    before: false
    latex: |
      Modify {\it Mickey.java} to draw ears on the ears, and ears on those ears, and more ears all the way down until the smallest ears are only 3 pixels wide.
      The result should look like Figure~\ref{fig.moose}.
      %
      {\em Hint:} You should have to add or modify only a few lines of code.

      \begin{figure}[!ht]
      \begin{center}
      \includegraphics[height=2in]{figs/moose.png}
      \caption{A recursive shape we call ``Mickey Moose''.}
      \label{fig.moose}
      \end{center}
      \end{figure}
      Test the code using the "Try It!" button below.

      {Try It!}(bash .guides/swing.sh cd code/appc javac Mickey.java java Mickey )

      If the display doesn't appear in the bottom left corner, click [here.](open_preview https://{{domain3000}} panel=1)

  - name: Exercise 20.3
    type: section
    chapter: Graphics
    section: Exercises
    before: false
    latex: |
      In this exercise, you will draw ``Moir\'{e} patterns'' that seem to shift around as you move.
      For an explanation of what is going on, see \url{https://en.wikipedia.org/wiki/Moire_pattern}.

      \begin{enumerate}

      \item Open {\it Moire.java} and read the \java{paint} method.
      Draw a sketch of what you expect it to do.
      Now run it.
      Did you get what you expected?

      \item Modify the program so that the space between the circles is larger or smaller.
      See what happens to the image.

      \item Modify the program so that the circles are drawn in the center of the screen and concentric, as in Figure~\ref{fig.moire} (left).
      The distance between the circles should be small enough that the Moir\'{e} interference is apparent.

      \begin{figure}[!ht]
      \begin{center}
      \includegraphics[height=2in]{figs/moire.pdf}
      \caption{Graphical patterns that can exhibit Moir\'{e} interference.}
      \label{fig.moire}
      \end{center}
      \end{figure}

      \item Write a method named \java{radial} that draws a radial set of line segments as shown in Figure~\ref{fig.moire} (right), but they should be close enough together to create a Moir\'{e} pattern.

      \item Just about any kind of graphical pattern can generate Moir\'{e}-like interference patterns.
      Play around and see what you can create.

      \end{enumerate}
      
      Test the code using the "Try It!" button below.

      {Try It!}(bash .guides/swing.sh cd code/appc javac Moire.java java Moire )

      If the display doesn't appear in the bottom left corner, click [here.](open_preview https://{{domain3000}} panel=1)
