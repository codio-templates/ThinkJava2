workspace:
  directory: /home/codio/workspace/codio-student-unit-exclude/ThinkJava2
  tex: thinkjava2.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
  suppressPageNumbering: true
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
 - code
 - fig: "*.jpg"
sections:
  - name: "Preface"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Philosophy Behind the Book"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Object-Oriented Programming"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Changes to the Second Edition"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "About the Appendixes"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Using the Code Examples"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Acknowledgments"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Computer Programming"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is a Computer?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is Programming?"
    type: section
    transformations:
      - add: | 
              Here is a random line of text. 
        position: 105
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Hello World Program -- TEST CHANGE"
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
                 See the example java code in the left pane. This is a random sentence. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello.java java -cp code/ch01/ Hello )

          position: 105
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello.java"
            panel: 0
            action: open
  - name: "Compiling Java Programs"
    type: section
  - name: "Displaying Two Messages"
    type: section
  - name: "Formatting Source Code"
    type: section
  - name: "Using Escape Sequences"
    type: section
  - name: "What Is Computer Science?"
    type: section
  - name: "Debugging Programs"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Variables and Operators"
    type: chapter
  - name: "Declaring Variables"
    type: section
  - name: "Assigning Variables"
    type: section
  - name: "Memory Diagrams"
    type: section
  - name: "Printing Variables"
    type: section
  - name: "Arithmetic Operators"
    type: section
  - name: "Floating-Point Numbers"
    type: section
  - name: "Rounding Errors"
    type: section
  - name: "Operators for Strings"
    type: section
  - name: "Compiler Error Messages"
    type: section
  - name: "Other Types of Errors"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Input and Output"
    type: chapter
  - name: "The System Class"
    type: section
  - name: "The Scanner Class"
    type: section
  - name: "Language Elements"
    type: section
  - name: "Literals and Constants"
    type: section
  - name: "Formatting Output"
    type: section
  - name: "Reading Error Messages"
    type: section
  - name: "Type Cast Operators"
    type: section
  - name: "Remainder Operator"
    type: section
  - name: "Putting It All Together"
    type: section
  - name: "The Scanner Bug"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Methods and Testing"
    type: chapter
  - name: "Defining New Methods"
    type: section
  - name: "Flow of Execution"
    type: section
  - name: "Parameters and Arguments"
    type: section
  - name: "Multiple Parameters"
    type: section
  - name: "Stack Diagrams"
    type: section
  - name: "Math Methods"
    type: section
  - name: "Composition"
    type: section
  - name: "Return Values"
    type: section
  - name: "Incremental Development"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Conditionals and Logic"
    type: chapter
  - name: "Relational Operators"
    type: section
  - name: "The if-else Statement"
    type: section
  - name: "Chaining and Nesting"
    type: section
  - name: "The switch Statement"
    type: section
  - name: "Logical Operators"
    type: section
  - name: "De Morgan's Laws"
    type: section
  - name: "Boolean Variables"
    type: section
  - name: "Boolean Methods"
    type: section
  - name: "Validating Input"
    type: section
  - name: "Example Program"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Loops and Strings"
    type: chapter
  - name: "The while Statement"
    type: section
  - name: "Increment and Decrement"
    type: section
  - name: "The for Statement"
    type: section
  - name: "Nested Loops"
    type: section
  - name: "Characters"
    type: section
  - name: "Which Loop to Use"
    type: section
  - name: "String Iteration"
    type: section
  - name: "The indexOf Method"
    type: section
  - name: "Substrings"
    type: section
  - name: "String Comparison"
    type: section
  - name: "String Formatting"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays and References"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Creating Arrays"
    type: section
    transformations:
       - remove: 1
         position: 66
       - add:  |
                 Of course, you can also declare the variable and create the array with a [single line of code:](open_file code/ch07/ArrayExamples.java panel=0 ref="int size" count=4)

         position: 67
       - remove: 1
         position: 80
       - add:  |
                 You can initialize an array with a comma-separated sequence of elements enclosed in braces, [like this:](open_file code/ch07/ArrayExamples.java panel=0 ref="int[] a" count=1)

         position: 81
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/ArrayExamples.java"
            panel: 0
            action: open
  - name: "Accessing Elements"
    type: section
    transformations:
       - remove: 1
         position: 125
       - add:  |
                 You can use the `[]` operator anywhere in an [expression:](open_file code/ch07/ArrayExamples.java panel=0 ref="counts[0]" count=4)

         position: 126
       - remove: 1
         position: 146
       - add:  |
                 [For example:](open_file code/ch07/ArrayExamples.java panel=0 ref="// traversal with a while loop" count=6)

         position: 147
       - remove: 1
         position: 165
       - add:  |
                 This type of array processing is usually written as a [for loop:](open_file code/ch07/ArrayExamples.java panel=0 ref="// traversal with a for loop" count=4)

         position: 166
       - add:  |
                 [Remove highlighting](open_file code/ch07/ArrayExamples.java panel=0)
                 To compile and run the code in the left panel, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch07/ArrayExamples.java java -cp code/ch07/ ArrayExamples )

         position: 179
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/ArrayExamples.java"
            panel: 0
            action: open
  - name: "Displaying Arrays"
    type: section
    transformations:
       - remove: 1
         position: 186
       - add:  |
                 For example, say you print an array [like this:](open_file code/ch07/ArrayExamples.java panel=0 ref="int[] a" count=2)

         position: 187
       - remove: 1
         position: 201
       - add:  |
                 If we want to [display the elements of the array](open_file code/ch07/ArrayExamples.java panel=0 ref="* Prints the elements of an array." count=9), we can do it ourselves:

         position: 202
       - remove: 1
         position: 226
       - add:  |
                 After importing `Arrays`, we can invoke `toString` [like this:](open_file code/ch07/ArrayExamples.java panel=0 ref="// printing with Arrays class" count=2)

         position: 227
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/ArrayExamples.java"
            panel: 0
            action: open
  - name: "Copying Arrays"
    type: section
    transformations:
       - remove: 1
         position: 312
       - add:  |
                 We can do that by replacing the magic number, `3`, [with a.length:](open_file code/ch07/ArrayExamples.java panel=0 ref="// copying an array" count=6)

         position: 313
       - remove: 1
         position: 328
       - add:  |
                 Of course, we can replace the loop altogether by using `Arrays.copyOf` and `a.length` [for the second argument.](open_file code/ch07/ArrayExamples.java panel=0 ref="// copying with Arrays class" count=2)

         position: 328
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/ArrayExamples.java"
            panel: 0
            action: open
  - name: "Traversing Arrays"
    type: section
    transformations:
       - remove: 1
         position: 345
       - add:  |
                 Looping through the elements of an array is called a [traversal:](open_file code/ch07/ArrayExamples.java panel=0 ref="// traversing arrays" count=4)

         position: 346
       - remove: 1
         position: 360
       - add:  |
                 For example, [the following method](open_file code/ch07/ArrayExamples.java panel=0 ref="* Returns the index" count=11) takes an array and a value, and it returns the index where the value appears:

         position: 361
       - remove: 1
         position: 392
       - add:  |
                 [The following method](open_file code/ch07/ArrayExamples.java panel=0 ref="* Returns the total" count=10) takes an array and returns the sum of its elements:

         position: 393
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/ArrayExamples.java"
            panel: 0
            action: open
  - name: "Random Numbers"
    type: section
    transformations:
       - remove: 1
         position: 442
       - add:  |
                   [The following method](open_file code/ch07/Histogram.java panel=0 ref="* Returns an array of random integers." count=10) creates an `int` array and fills it with random numbers between 0 and 99.

         position: 443
       - remove: 1
         position: 456
       - add:  |
                   [The following main method](open_file code/ch07/Histogram.java panel=0 ref="public static void main" count=4) generates an array and displays it by using the `printArray` method from Section 7.3. 

         position: 457
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/Histogram.java"
            panel: 0
            action: open
  - name: "Building a Histogram"
    type: section
    transformations:
       - remove: 1
         position: 486
       - add:  |
                   [The following method](open_file code/ch07/Histogram.java panel=0 ref="* Computes the number" count=11) takes an array and two integers.

         position: 487
       - remove: 1
         position: 508
       - add:  |
                   We add [the following code](open_file code/ch07/Histogram.java panel=0 ref="int[] scores" count=6) to our `main` method:

         position: 509
       - remove: 1
         position: 555
       - add:  |
                   [This code](open_file code/ch07/Histogram.java panel=0 ref="// making a histogram" count=6) traverses the array of scores only once to generate the histogram:

         position: 556
       - add:  |
                 Putting together all the above code fragments, and adding some comments and test cases, see the complete example java code in the left pane. To compile and run the code, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch07/*.java java -cp code/ch07/ Histogram )

         position: 568
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/Histogram.java"
            panel: 0
            action: open
  - name: "The Enhanced for Loop"
    type: section
    transformations:
       - remove: 1
         position: 600
       - add:  |
                   Using the enhanced `for` loop, and removing the temporary variable, [we can write the histogram code](open_file code/ch07/Histogram.java panel=0 ref="// histogram" count=5) from the previous section more concisely:

         position: 601
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/Histogram.java"
            panel: 0
            action: open
  - name: "Counting Characters"
    type: section
    transformations:
       - remove: 1
         position: 633
       - add:  |
                   [We convert the string to lowercase,](open_file code/ch07/Doubloon.java panel=0 ref="// count the number" count=3) so that we can treat `'A'` and `'a'` (for example) as the same letter.

         position: 634
       - remove: 1
         position: 661
       - add:  |
                   We can simplify this code with an enhanced for loop, but it doesn’t work with strings; we have to convert lower to an array of characters, [like this:](open_file code/ch07/Doubloon.java panel=0 ref="// count the number" count=7)

         position: 662
       - remove: 1
         position: 670
       - add:  |
                   Once we have the counts, [we can use a second for loop](open_file code/ch07/Doubloon.java panel=0 ref="// determine whether the given word is a doubloon" count=8) to check whether each letter appears zero or two times:

         position: 671
       - remove: 1
         position: 684
       - add:  |
                 Pulling together the code fragments, and adding some comments and test cases, see the complete example java code in the left pane. To compile and run the code, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch07/Doubloon.java java -cp code/ch07/ Doubloon )

         position: 685
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch07/Doubloon.java"
            panel: 0
            action: open
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Recursive Methods"
    type: chapter
  - name: "Recursive Void Methods"
    type: section
    transformations:
       - remove: 1
         position: 19
       - add:  |
                   [Consider the following example:](open_file code/ch08/Examples.java panel=0 ref="public static void countdown" count=8)

         position: 20
       - remove: 1
         position: 84
       - add:  |
                   A more general alternative would be [the following:](open_file code/ch08/Examples.java panel=0 ref="public static void nLines" count=6)

         position: 85
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch08/Examples.java"
            panel: 0
            action: open
  - name: "Recursive Stack Diagrams"
    type: section
    transformations:
       - remove: 1
         position: 139
       - add:  |
                   For example, [here](open_file code/ch08/Examples.java panel=0 ref="public static void forever" count=4) is a recursive method without a base case:

         position: 140
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch08/Examples.java"
            panel: 0
            action: open
  - name: "Value-Returning Methods"
    type: section
    transformations:
       - remove: 1
         position: 212
       - add:  |
                   If the argument happens to be 0, [we return 1:](open_file code/ch08/Series.java panel=0 ref="public static int factorial" count=4)

         position: 213
       - remove: 1
         position: 223
       - add:  |
                   Otherwise, and this is the interesting part, [we have to make a recursive call](open_file code/ch08/Series.java panel=0 ref="int recurse" count=3) to find the factorial of n−1, and then multiply it by n:

         position: 224
       - add:  |
                 Pulling together all of the above code fragments, and adding some test cases, run the complete example java code in the left pane. To compile and run the code, press "Run!".
                 This will execute both the fibonacci and factorial functions, the former of which we will get to at a later stage. 
                 {Run!}(sh .guides/bg.sh javac code/ch08/Series.java java -cp code/ch08/ Series )

         position: 275
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch08/Series.java"
            panel: 0
            action: open
  - name: "The Leap of Faith"
    type: section
    transformations:
       - remove: 1
         position: 344
       - add:  |
                   Translated into Java, [this function is as follows:](open_file code/ch08/Series.java panel=0 ref="public static int fibonacci" count=6)

         position: 345
       - add:  |
                 Run the complete example java code and fibonacci function in the left pane. To compile and run the code, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch08/Series.java java -cp code/ch08/ Series )

         position: 358
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch08/Series.java"
            panel: 0
            action: open
  - name: "Counting Up Recursively"
    type: section
    transformations:
       - remove: 1
         position: 363
       - add:  |
                   What do you think happens if you reverse steps 2 and 3, [making the recursive call before displaying?](open_file code/ch08/Examples.java panel=0 ref="public static void countup" count=8)

         position: 364
       - add:  |
                 Test and run both the `countup` and `countdown` functions here.
                 {Run!}(sh .guides/bg.sh javac code/ch08/Examples.java java -cp code/ch08/ Examples )

         position: 388
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch08/Examples.java"
            panel: 0
            action: open
  - name: "Binary Number System"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Recursive Binary Method"
    type: section
    transformations:
       - remove: 1
         position: 499
       - add:  |
                   [Here](open_file code/ch08/Examples.java panel=0 ref="public static void displayBinary" count=6) is a recursive method that displays any positive integer in binary:

         position: 500
       - add:  |
                 Test and run the code here.
                 {Run!}(sh .guides/bg.sh javac code/ch08/Examples.java java -cp code/ch08/ Examples )

         position: 535
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch08/Examples.java"
            panel: 0
            action: open
  - name: "CodingBat Problems"
    type: section
    transformations:
       - add:  |
                 See both solved CodingBat problems in java in the left pane. To compile and run the code, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch08/CodingBat.java java -cp code/ch08/ CodingBat )

         position: 654
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch08/CodingBat.java"
            panel: 0
            action: open
  - name: "Vocabulary"
    type: section
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Immutable Objects"
    type: chapter
  - name: "Primitives vs Objects"
    type: section
  - name: "The null Keyword"
    type: section
  - name: "Strings Are Immutable"
    type: section
  - name: "Wrapper Classes"
    type: section
  - name: "Command-Line Arguments"
    type: section
  - name: "Argument Validation"
    type: section
  - name: "BigInteger Arithmetic"
    type: section
  - name: "Incremental Design"
    type: section
  - name: "More Generalization"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Mutable Objects"
    type: chapter
  - name: "Point Objects"
    type: section
  - name: "Objects as Parameters"
    type: section
  - name: "Objects as Return Values"
    type: section
  - name: "Rectangles Are Mutable"
    type: section
  - name: "Aliasing Revisited"
    type: section
  - name: "Java Library Source"
    type: section
  - name: "Class Diagrams"
    type: section
  - name: "Scope Revisited"
    type: section
  - name: "Garbage Collection"
    type: section
  - name: "Mutable vs Immutable"
    type: section
  - name: "StringBuilder Objects"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Designing Classes"
    type: chapter
  - name: "The Time Class"
    type: section
  - name: "Constructors"
    type: section
  - name: "Value Constructors"
    type: section
  - name: "Getters and Setters"
    type: section
  - name: "Displaying Objects"
    type: section
  - name: "The toString Method"
    type: section
  - name: "The equals Method"
    type: section
  - name: "Adding Times"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Objects"
    type: chapter
  - name: "Card Objects"
    type: section
  - name: "Card toString"
    type: section
  - name: "Class Variables"
    type: section
  - name: "The compareTo Method"
    type: section
  - name: "Cards Are Immutable"
    type: section
  - name: "Arrays of Cards"
    type: section
  - name: "Sequential Search"
    type: section
  - name: "Binary Search"
    type: section
  - name: "Tracing the Code"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Objects of Arrays"
    type: chapter
  - name: "Decks of Cards"
    type: section
  - name: "Shuffling Decks"
    type: section
  - name: "Selection Sort"
    type: section
  - name: "Merge Sort"
    type: section
  - name: "Subdecks"
    type: section
  - name: "Merging Decks"
    type: section
  - name: "Adding Recursion"
    type: section
  - name: "Static Context"
    type: section
  - name: "Piles of Cards"
    type: section
  - name: "Playing War"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Extending Classes"
    type: chapter
  - name: "CardCollection"
    type: section
  - name: "Inheritance"
    type: section
  - name: "Dealing Cards"
    type: section
  - name: "The Player Class"
    type: section
  - name: "The Eights Class"
    type: section
  - name: "Class Relationships"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Arrays"
    type: chapter
  - name: "Conway's Game of Life"
    type: section
  - name: "The Cell Class"
    type: section
  - name: "Two-Dimensional Arrays"
    type: section
  - name: "The GridCanvas Class"
    type: section
  - name: "Other Grid Methods"
    type: section
  - name: "Starting the Game"
    type: section
  - name: "The Simulation Loop"
    type: section
  - name: "Exception Handling"
    type: section
  - name: "Counting Neighbors"
    type: section
  - name: "Updating the Grid"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Reusing Classes"
    type: chapter
  - name: "Langton's Ant"
    type: section
  - name: "Refactoring"
    type: section
  - name: "Abstract Classes"
    type: section
  - name: "UML Diagram"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Advanced Topics"
    type: chapter
  - name: "Polygon Objects"
    type: section
  - name: "Adding Color"
    type: section
  - name: "Regular Polygons"
    type: section
  - name: "More Constructors"
    type: section
  - name: "An Initial Drawing"
    type: section
  - name: "Blinking Polygons"
    type: section
  - name: "Interfaces"
    type: section
  - name: "Event Listeners"
    type: section
  - name: "Timers"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Tools"
    type: chapter
  - name: "Installing DrJava"
    type: section
  - name: "DrJava Interactions"
    type: section
  - name: "Command-Line Interface"
    type: section
  - name: "Command-Line Testing"
    type: section
  - name: "Running Checkstyle"
    type: section
  - name: "Tracing with a Debugger"
    type: section
  - name: "Testing with JUnit"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Javadoc"
    type: chapter
  - name: "Reading Documentation"
    type: section
  - name: "Writing Documentation"
    type: section
  - name: "Javadoc Tags"
    type: section
  - name: "Example Source File"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Graphics"
    type: chapter
  - name: "Creating Graphics"
    type: section
  - name: "Graphics Methods"
    type: section
  - name: "Example Drawing"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Debugging"
    type: chapter
  - name: "Compile-Time Errors"
    type: section
  - name: "Run-Time Errors"
    type: section
  - name: "Logic Errors"
    type: section
