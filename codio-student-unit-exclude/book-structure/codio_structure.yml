workspace:
  directory: /home/codio/workspace/codio-student-unit-exclude/ThinkJava2
  tex: thinkjava2.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
  suppressPageNumbering: true
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
 - code
 - fig: "*.jpg"
sections:
  - name: "Preface"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Philosophy Behind the Book"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Object-Oriented Programming"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Changes to the Second Edition"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "About the Appendixes"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Using the Code Examples"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Acknowledgments"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Computer Programming"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is a Computer?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is Programming?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Hello World Program"
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
                 See the example java code in the left pane. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello.java java -cp code/ch01/ Hello )

          position: 105
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello.java"
            panel: 0
            action: open
  - name: "Compiling Java Programs"
    type: section
  - name: "Displaying Two Messages"
    type: section
  - name: "Formatting Source Code"
    type: section
  - name: "Using Escape Sequences"
    type: section
  - name: "What Is Computer Science?"
    type: section
  - name: "Debugging Programs"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Variables and Operators"
    type: chapter
  - name: "Declaring Variables"
    type: section
  - name: "Assigning Variables"
    type: section
  - name: "Memory Diagrams"
    type: section
  - name: "Printing Variables"
    type: section
  - name: "Arithmetic Operators"
    type: section
  - name: "Floating-Point Numbers"
    type: section
  - name: "Rounding Errors"
    type: section
  - name: "Operators for Strings"
    type: section
  - name: "Compiler Error Messages"
    type: section
  - name: "Other Types of Errors"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Input and Output"
    type: chapter
  - name: "The System Class"
    type: section
  - name: "The Scanner Class"
    type: section
  - name: "Language Elements"
    type: section
  - name: "Literals and Constants"
    type: section
  - name: "Formatting Output"
    type: section
  - name: "Reading Error Messages"
    type: section
  - name: "Type Cast Operators"
    type: section
  - name: "Remainder Operator"
    type: section
  - name: "Putting It All Together"
    type: section
  - name: "The Scanner Bug"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Methods and Testing"
    type: chapter
  - name: "Defining New Methods"
    type: section
  - name: "Flow of Execution"
    type: section
  - name: "Parameters and Arguments"
    type: section
  - name: "Multiple Parameters"
    type: section
  - name: "Stack Diagrams"
    type: section
  - name: "Math Methods"
    type: section
  - name: "Composition"
    type: section
  - name: "Return Values"
    type: section
  - name: "Incremental Development"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Conditionals and Logic"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Relational Operators"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The if-else Statement"
    type: section
    transformations:
        - remove: 7
          position: 76
        - add:  |
                 [Click here to see an example on the left.](open_file code/ch05/IfElse.java panel=0 ref="if" count=3) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/IfElse.java java -cp code/ch05/ IfElse 1)

          position: 82
        - remove: 7
          position: 95
        - add:  |
                 [Click here to see an example on the left.](open_file code/ch05/IfElse.java panel=0 ref="x % 2" count=5) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/IfElse.java java -cp code/ch05/ IfElse 2)

          position: 101
        - remove: 8
          position: 108
        - add:  |
                 So we could have written the previous example [this way.](open_file code/ch05/IfElse.java panel=0 ref="look" count=6) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/IfElse.java java -cp code/ch05/ IfElse 3)

          position: 116
        - remove: 7
          position: 118
        - add:  |
                 [This code](open_file code/ch05/IfElse.java panel=0 ref="logic" count=4) is misleading because it's not indented correctly. Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/IfElse.java java -cp code/ch05/ IfElse 4) Then try changing x to 0 and see if the code works as expected. 

          position: 125
        - remove: 8
          position: 143 
        - add:  |
                 Another common mistake is to put a semicolon after the condition, like [this.](open_file code/ch05/IfElse.java panel=0 ref="incorrect semicolon" count=3) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/IfElse.java java -cp code/ch05/ IfElse 5)

          position: 151
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch05/IfElse.java"
            panel: 0
            action: open
  - name: "Chaining and Nesting"
    type: section
    transformations:
        - remove: 9
          position: 179
        - add:  |
                 [Click here to see an example on the left.](open_file code/ch05/ChainNest.java panel=0 ref="if" count=7) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/ChainNest.java java -cp code/ch05/ ChainNest 1)


          position: 187
        - remove: 13
          position: 200
        - add:  |
                 [We could have written it this way instead.](open_file code/ch05/ChainNest.java panel=0 ref="alternate way" count=10) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/ChainNest.java java -cp code/ch05/ ChainNest 2)

          position: 213
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch05/ChainNest.java"
            panel: 0
            action: open
  - name: "The switch Statement"
    type: section
    transformations:
        - remove: 14
          position: 227
        - add:  |
                 For example, consider the first part of the program on the left. [Click to view.](open_file code/ch05/Switch.java panel=0 ref="if" count=14) It converts integers like `1`,`2`, and `3` into words like `"one"`, `"two"`, and `"three"`. Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/Switch.java java -cp code/ch05/ Switch 1)

          position: 244
        - remove: 19
          position: 245
        - add:  |
                 
                 An alternative way to evaluate many possible values of an expression is to use a ```switch``` statement:, as shown [on the left.](open_file code/ch05/Switch.java panel=0 ref="same" count=18) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/Switch.java java -cp code/ch05/ Switch 2)


          position: 263
        - add:  |
                 
                 
                 
          position: 263
        - remove: 17
          position: 268
        - add:  |
                 
                 
                 Although `switch` statements appear longer than chained `else if` blocks, they are particularly useful when multiple cases can be grouped, as seen [on the left.](open_file code/ch05/Switch.java panel=0 ref="fall" count=15) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/Switch.java java -cp code/ch05/ Switch 3)

          position: 284
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch05/Switch.java"
            panel: 0
            action: open
  - name: "Logical Operators"
    type: section
    transformations:
        - remove: 16
          position: 315
        - add:  |
                 For example, [this code at the left](open_file code/ch05/LogicalOpers.java panel=0 ref="nested" count=6) can be rewritten with a single condition, to look [like this](open_file code/ch05/LogicalOpers.java panel=0 ref="combined" count=4) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/LogicalOpers.java java -cp code/ch05/ LogicalOpers 1)

          position: 331
        - remove: 19
          position: 332
        - add:  |
                 Likewise, the `||` operator can simplify chained `if` statements, such as the one [at the left](open_file code/ch05/LogicalOpers.java panel=0 ref="chained" count=6). Since the branches are the same, there is no need to duplicate [this line of code](open_file code/ch05/LogicalOpers.java panel=0 ref="Either" count=1).  
                 Therefore, we can combine them [like this](open_file code/ch05/LogicalOpers.java panel=0 ref="can make things easier" count=4) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/LogicalOpers.java java -cp code/ch05/ LogicalOpers 2)

          position: 350
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch05/LogicalOpers.java"
            panel: 0
            action: open
  - name: "De Morgan's Laws"
    type: section
    transformations:
        - remove: 10
          position: 368
        - add:  |
                 For example, to test if `x` and `y` are both nonzero, you could write [this code at the left.](open_file code/ch05/LogicalOpers.java panel=0 ref="!" count=3) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/LogicalOpers.java java -cp code/ch05/ LogicalOpers 1) This code won't print anything, because the condition is false. 

          position: 378
        - remove: 8
          position: 402
        - add:  |
                 The logic is the same, and the source code is easier to read, as seen [here at the left.](open_file code/ch05/LogicalOpers.java panel=0 ref="x !" count=3) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/LogicalOpers.java java -cp code/ch05/ LogicalOpers 2) This code still won't print anything, because the condition is still false. 
 
          position: 410
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch05/LogicalOpers.java"
            panel: 0
            action: open
  - name: "Boolean Variables"
    type: section
    transformations:
        - remove: 7
          position: 418
        - add:  |
                 In the example at the left, the first line is a variable declaration, the second is an assignment, and the third is both. [Click to view.](open_file code/ch05/LogicalOpers.java panel=0 ref="boolean" count=4) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/LogicalOpers.java java -cp code/ch05/ LogicalOpers 1) This won't print anything because there are no print statements: the code is only saving boolean values into memory and labeling them. 

          position: 425
        - remove: 8
          position: 429
        - add:  |
                 Since relational and logical operators evaluate to a `boolean` value, you can store the result of a comparison in a variable, as is done [here at the left.](open_file code/ch05/LogicalOpers.java panel=0 ref="even" count=2) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/LogicalOpers.java java -cp code/ch05/ LogicalOpers 2) This still doesn't print anything. Be sure **NOT** to re-comment these lines out before moving on to the next code snippet. 

          position: 437
        - remove: 8
          position: 441
        - add:  |
                 You can even use flag variables as part of a conditional statement, [like this.](open_file code/ch05/LogicalOpers.java panel=0 ref="evenFlag)" count=3) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/LogicalOpers.java java -cp code/ch05/ LogicalOpers 3)

          position: 449
        - remove: 8
          position: 454
        - add:  |
                 To check if a flag is `false`, we simply negate the flag [like this.](open_file code/ch05/LogicalOpers.java panel=0 ref="!evenFlag" count=3) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/LogicalOpers.java java -cp code/ch05/ LogicalOpers 4)

          position: 462
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch05/LogicalOpers.java"
            panel: 0
            action: open
  - name: "Boolean Methods"
    type: section
    transformations:
        - remove: 11
          position: 473
        - add:  |
                 [Click to see an example at the left.](open_file code/ch05/DigitUtil.java panel=0 ref="isSingleDigit" count=7) 

          position: 484
        - remove: 5
          position: 492
        - add:  |
                 [Click to see an example at the left.](open_file code/ch05/DigitUtil.java panel=0 ref="isSingleDigit2" count=3)

          position: 497
        - remove: 5
          position: 500
        - add:  |
                 [Click to see an example at the left.](open_file code/ch05/DigitUtil.java panel=0 ref="main" count=3) To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/DigitUtil.java java -cp code/ch05/ DigitUtil 3)

          position: 505
        - remove: 8
          position: 510
        - add:  |
                 [Click to see an example at the left.](open_file code/ch05/DigitUtil.java panel=0 ref="z" count=6) Remove the comment symbols in front of the code and then press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch05/DigitUtil.java java -cp code/ch05/ DigitUtil 4)

          position: 518
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch05/DigitUtil.java"
            panel: 0
            action: open
  - name: "Validating Input"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Example Program"
    type: section
    transformations:
        - remove: 36
          position: 607
        - add:  |
                 The program on the left shows how the individual code examples in the previous section fit together. To compile and run the code, press the "Run!" and enter your input into the terminal on the bottom left.
                 {Run!|terminal}(sh .guides/bg.sh javac code/ch05/Logarithm.java java -cp code/ch05/ Logarithm ) 

          position: 643
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch05/Logarithm.java"
            panel: 0
            action: open
          - path: "#terminal: "
            panel: 1
            action: open
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
  - name: "Loops and Strings"
    type: chapter
  - name: "The while Statement"
    type: section
  - name: "Increment and Decrement"
    type: section
  - name: "The for Statement"
    type: section
  - name: "Nested Loops"
    type: section
  - name: "Characters"
    type: section
  - name: "Which Loop to Use"
    type: section
  - name: "String Iteration"
    type: section
  - name: "The indexOf Method"
    type: section
  - name: "Substrings"
    type: section
  - name: "String Comparison"
    type: section
  - name: "String Formatting"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays and References"
    type: chapter
  - name: "Creating Arrays"
    type: section
  - name: "Accessing Elements"
    type: section
  - name: "Displaying Arrays"
    type: section
  - name: "Copying Arrays"
    type: section
  - name: "Traversing Arrays"
    type: section
  - name: "Random Numbers"
    type: section
  - name: "Building a Histogram"
    type: section
  - name: "The Enhanced for Loop"
    type: section
  - name: "Counting Characters"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Recursive Methods"
    type: chapter
  - name: "Recursive Void Methods"
    type: section
  - name: "Recursive Stack Diagrams"
    type: section
  - name: "Value-Returning Methods"
    type: section
  - name: "The Leap of Faith"
    type: section
  - name: "Counting Up Recursively"
    type: section
  - name: "Binary Number System"
    type: section
  - name: "Recursive Binary Method"
    type: section
  - name: "CodingBat Problems"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Immutable Objects"
    type: chapter
  - name: "Primitives vs Objects"
    type: section
  - name: "The null Keyword"
    type: section
  - name: "Strings Are Immutable"
    type: section
  - name: "Wrapper Classes"
    type: section
  - name: "Command-Line Arguments"
    type: section
  - name: "Argument Validation"
    type: section
  - name: "BigInteger Arithmetic"
    type: section
  - name: "Incremental Design"
    type: section
  - name: "More Generalization"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Mutable Objects"
    type: chapter
  - name: "Point Objects"
    type: section
  - name: "Objects as Parameters"
    type: section
  - name: "Objects as Return Values"
    type: section
  - name: "Rectangles Are Mutable"
    type: section
  - name: "Aliasing Revisited"
    type: section
  - name: "Java Library Source"
    type: section
  - name: "Class Diagrams"
    type: section
  - name: "Scope Revisited"
    type: section
  - name: "Garbage Collection"
    type: section
  - name: "Mutable vs Immutable"
    type: section
  - name: "StringBuilder Objects"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Designing Classes"
    type: chapter
  - name: "The Time Class"
    type: section
  - name: "Constructors"
    type: section
  - name: "Value Constructors"
    type: section
  - name: "Getters and Setters"
    type: section
  - name: "Displaying Objects"
    type: section
  - name: "The toString Method"
    type: section
  - name: "The equals Method"
    type: section
  - name: "Adding Times"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Objects"
    type: chapter
  - name: "Card Objects"
    type: section
  - name: "Card toString"
    type: section
  - name: "Class Variables"
    type: section
  - name: "The compareTo Method"
    type: section
  - name: "Cards Are Immutable"
    type: section
  - name: "Arrays of Cards"
    type: section
  - name: "Sequential Search"
    type: section
  - name: "Binary Search"
    type: section
  - name: "Tracing the Code"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Objects of Arrays"
    type: chapter
  - name: "Decks of Cards"
    type: section
  - name: "Shuffling Decks"
    type: section
  - name: "Selection Sort"
    type: section
  - name: "Merge Sort"
    type: section
  - name: "Subdecks"
    type: section
  - name: "Merging Decks"
    type: section
  - name: "Adding Recursion"
    type: section
  - name: "Static Context"
    type: section
  - name: "Piles of Cards"
    type: section
  - name: "Playing War"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Extending Classes"
    type: chapter
  - name: "CardCollection"
    type: section
  - name: "Inheritance"
    type: section
  - name: "Dealing Cards"
    type: section
  - name: "The Player Class"
    type: section
  - name: "The Eights Class"
    type: section
  - name: "Class Relationships"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Arrays"
    type: chapter
  - name: "Conway's Game of Life"
    type: section
  - name: "The Cell Class"
    type: section
  - name: "Two-Dimensional Arrays"
    type: section
  - name: "The GridCanvas Class"
    type: section
  - name: "Other Grid Methods"
    type: section
  - name: "Starting the Game"
    type: section
  - name: "The Simulation Loop"
    type: section
  - name: "Exception Handling"
    type: section
  - name: "Counting Neighbors"
    type: section
  - name: "Updating the Grid"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Reusing Classes"
    type: chapter
  - name: "Langton's Ant"
    type: section
  - name: "Refactoring"
    type: section
  - name: "Abstract Classes"
    type: section
  - name: "UML Diagram"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Advanced Topics"
    type: chapter
  - name: "Polygon Objects"
    type: section
  - name: "Adding Color"
    type: section
  - name: "Regular Polygons"
    type: section
  - name: "More Constructors"
    type: section
  - name: "An Initial Drawing"
    type: section
  - name: "Blinking Polygons"
    type: section
  - name: "Interfaces"
    type: section
  - name: "Event Listeners"
    type: section
  - name: "Timers"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Tools"
    type: chapter
  - name: "Installing DrJava"
    type: section
  - name: "DrJava Interactions"
    type: section
  - name: "Command-Line Interface"
    type: section
  - name: "Command-Line Testing"
    type: section
  - name: "Running Checkstyle"
    type: section
  - name: "Tracing with a Debugger"
    type: section
  - name: "Testing with JUnit"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Javadoc"
    type: chapter
  - name: "Reading Documentation"
    type: section
  - name: "Writing Documentation"
    type: section
  - name: "Javadoc Tags"
    type: section
  - name: "Example Source File"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Graphics"
    type: chapter
  - name: "Creating Graphics"
    type: section
  - name: "Graphics Methods"
    type: section
  - name: "Example Drawing"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Debugging"
    type: chapter
  - name: "Compile-Time Errors"
    type: section
  - name: "Run-Time Errors"
    type: section
  - name: "Logic Errors"
    type: section
insert_sections:
  - name: Exercise 5.1
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    markdown: |
      Rewrite the code on the left by using a single `if` statement. To test out your code, press the Run button below and try assigning different values of x. 
      {Run!}(sh .guides/bg.sh javac code/ch05/Exercise1.java java -cp code/ch05/ Exercise1 4)
      
  - name: Exercise 5.2
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    markdown: |
      Now that we have conditional statements, we can get back to the *Guess My Number* game from Exercise 3.4.

      You should already have a program that chooses a random number, prompts the user to guess it, and displays the difference between the guess and the chosen number.

      By adding a small amount of code at a time and testing as you go, modify the program so it tells the user whether the guess is too high or too low, and then prompts the user for another guess.

      The program should continue until the user gets it right or guesses incorrectly three times. If the user guesses the correct number, display a message and terminate the program
      
      {Run!}(sh .guides/bg.sh javac code/ch05/Exercise2.java java -cp code/ch05/ Exercise2 4)

  - name: Exercise 5.3
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    # testing if run buttons work in latex
    latex: | 
      Fermat's Last Theorem says that there are no integers $a$, $b$, $c$, and $n$ such that $a^n + b^n = c^n$, except when $n \leq 2$.

      Write a program named {\it Fermat.java} that inputs four integers (\java{a}, \java{b}, \java{c}, and \java{n}) and checks to see if Fermat's theorem holds.
      If $n$ is greater than 2 and $a^n + b^n = c^n$, the program should display ``Holy smokes, Fermat was wrong!''
      Otherwise, the program should display ``No, that doesn't work.''

      {\em Hint:} You might want to use \java{Math.pow}.
      
      {Run!}(sh .guides/bg.sh javac code/ch05/Fermat.java java -cp code/ch05/ Fermat 4)
      
  - name: Exercise 5.4
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    # TODO: add assessment so students can log answers
    latex: |
      Using the following variables, evaluate the logic expressions in the table that follows.
      
      Write your answers as true, false, or error.

      \begin{code}
      boolean yes = true;
      boolean no = false;
      int loVal = -999;
      int hiVal = 999;
      double grade = 87.5;
      double amount = 50.0;
      String hello = "world";
      \end{code}

      \vspace{1ex}

      \begin{center}
      \begin{tabular}{|l|l|}
      \hline
      Expression & Result \\
      \hline
      \hline
      \java{yes == no || grade > amount} & \hspace{5em} \\
      \hline
      \java{amount == 40.0 || 50.0} &  \\
      \hline
      \java{hiVal != loVal || loVal < 0} &  \\
      \hline
      \java{True || hello.length() > 0} &  \\
      \hline
      \java{hello.isEmpty() && yes} &  \\
      \hline
      \java{grade <= 100 && !false} &  \\
      \hline
      \java{!yes || no} &  \\
      \hline
      \java{grade > 75 > amount} &  \\
      \hline
      \java{amount <= hiVal && amount >= loVal} &  \\
      \hline
      \java{no && !no || yes && !yes} &  \\
      \hline
      \end{tabular}
      \end{center}

  - name: Exercise 5.5
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    # TODO: add assessment here as well 
    markdown: |
      What will be the output of the program to the left? Determine the answer without running the code. 

  - name: Exercise 5.6
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    latex: |
     Write a program named {\it Quadratic.java} that finds the roots of $ax^2 + bx + c = 0$ using the quadratic formula:
      %
      \[ x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} \]
      %
      Prompt the user to input integers for $a$, $b$, and $c$.
      Compute the two solutions for $x$, and display the results.

      Your program should be able to handle inputs for which there is only one or no solution.
      Specifically, it should not divide by zero or take the square root of a negative number.

      Be sure to validate all inputs.
      The user should never see an input mismatch exception.
      Display specific error messages that include the invalid input.
      
      {Run!}(sh .guides/bg.sh javac code/ch05/Quadratic.java java -cp code/ch05/ Quadratic 4)
      
  - name: Exercise 5.7
    type: section
    chapter: Conditionals and logic
    section: Exercises
    before: false
    markdown: |
      If you are given three sticks, you may or may not be able to arrange them in a triangle.
      For example, if one of the sticks is 12 inches long and the other two are 1 inch long, you will not be able to get the short sticks to meet in the middle.
      For any three lengths, there is a simple test to see if it is possible to form a triangle:

      \begin{quotation}
      \noindent
      If any of the three lengths is greater than the sum of the other two, you cannot form a triangle.
      \end{quotation}

      Write a program named {\it Triangle.java} that inputs three integers, and then outputs whether you can (or cannot) form a triangle from the given lengths.
      %The point of this exercise is to use conditional statements to write a value method.
      Reuse your code from the previous exercise to validate the inputs.
      Display an error if any of the lengths are negative or zero.
      {Run!}(sh .guides/bg.sh javac code/ch05/Triangle.java java -cp code/ch05/ Triangle 4)