workspace:
  directory: /home/codio/workspace/codio-student-unit-exclude/ThinkJava2
  tex: thinkjava2.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
  suppressPageNumbering: true
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
 - code
 - fig: "*.jpg"
sections:
  - name: "Preface"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Philosophy Behind the Book"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Object-Oriented Programming"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Changes to the Second Edition"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "About the Appendixes"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Using the Code Examples"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Acknowledgments"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Computer Programming"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is a Computer?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is Programming?"
    type: section
    transformations:
      - add: | 
              Here is a random line of text. 
        position: 105
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Hello World Program -- TEST CHANGE"
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
                 See the example java code in the left pane. This is a random sentence. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello.java java -cp code/ch01/ Hello )

          position: 105
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello.java"
            panel: 0
            action: open
  - name: "Compiling Java Programs"
    type: section
  - name: "Displaying Two Messages"
    type: section
  - name: "Formatting Source Code"
    type: section
  - name: "Using Escape Sequences"
    type: section
  - name: "What Is Computer Science?"
    type: section
  - name: "Debugging Programs"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Variables and Operators"
    type: chapter
  - name: "Declaring Variables"
    type: section
  - name: "Assigning Variables"
    type: section
  - name: "Memory Diagrams"
    type: section
  - name: "Printing Variables"
    type: section
  - name: "Arithmetic Operators"
    type: section
  - name: "Floating-Point Numbers"
    type: section
  - name: "Rounding Errors"
    type: section
  - name: "Operators for Strings"
    type: section
  - name: "Compiler Error Messages"
    type: section
  - name: "Other Types of Errors"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Input and Output"
    type: chapter
  - name: "The System Class"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Scanner Class"
    type: section
    transformations:
        - add:  |
                  [View the highlighted the code](open_file code/ch03/Echo.java panel=0 ref="Scanner in" count=3)
                  [Remove the highlight](open_file code/ch03/Echo.java panel=0)

          position: 100

        - add:  |
                 See the example java code in the left pane. This is a random sentence. To compile and run the code, press the "Run!"
                 {Run!| terminal}(sh .guides/bg.sh javac code/ch03/Echo.java java -cp code/ch03/ Echo )

          position: 129
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch03/Echo.java"
            panel: 0
            action: open
          - path: "#terminal: clear"
            panel: 1
            action: open
            
      
  - name: "Language Elements"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Literals and Constants"
    type: section
    transformations:
        - add:  |
                  [View the highlighted the code](open_file code/ch03/Literals.java panel=0 ref="int inch" count=3)
                  [Remove highlight](open_file code/ch03/Literals.java panel=0)
          position: 200
        - add:  |
                  [View the highlighted the code](open_file code/ch03/Literals.java panel=0 ref="cm =" count=3)
                  [Remove highlight](open_file code/ch03/Literals.java panel=0)
          position: 213
        - add:  |
                  [View the highlighted the code](open_file code/ch03/Literals.java panel=0 ref="cm" count=3)
                  [Remove highlight](open_file code/ch03/Literals.java panel=0)
          position: 220
        - add:  |
                 See the example java code in the left pane. This is a random sentence. To compile and run the code, press the "Run!"
                 {Run!|terminal}(sh .guides/bg.sh javac code/ch03/Literals.java java -cp code/ch03/ Literals)

          position: 264
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch03/Literals.java"
            panel: 0
            action: open
          - path: "#terminal: clear"
            panel: 1
            action: open  
    
  - name: "Formatting Output"
    type: section
    transformations:
      - add:  |
                  [View the highlighted the code](open_file code/ch03/Formatting.java panel=0 ref="int inch" count=3)
                  [Remove the highlight](open_file code/ch03/Formatting.java panel=0)
        position: 310
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!}(sh .guides/bg.sh javac code/ch03/Formatting.java java -cp code/ch03/ Formatting)
          
        position : 279
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!}(sh .guides/bg.sh javac code/ch03/Formatting.java java -cp code/ch03/ Formatting)
          
        position : 299
        
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!}(sh .guides/bg.sh javac code/ch03/Formatting.java java -cp code/ch03/ Formatting)
          
        position : 316
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch03/Formatting.java"
            panel: 0
            action: open
  - name: "Reading Error Messages"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close

  - name: "Type Cast Operators"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Remainder Operator"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Putting It All Together"
    type: section
    transformations:
        
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!| terminal}(sh .guides/bg.sh javac code/ch03/Convert.java java -cp code/ch03/ Convert )
          
        position : 563
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch03/Convert.java"
            panel: 0
            action: open
            action: open
          - path: "#terminal: clear"
            panel: 1
            action: open
    
  - name: "The Scanner Bug"
    type: section
    transformations:
      - add:  |
                  [View the highlighted the code](open_file code/ch03/ScannerBug.java panel=0 ref="System.out.print" count=5)
                  [Remove the Highlight](open_file code/ch03/ScannerBug.java panel=0 ref=)

        position: 600
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!|terminal}(sh .guides/bg.sh javac code/ch03/ScannerBug.java java -cp code/ch03/ ScannerBug )
          
        position : 608
    configuration:
       layout: 3-cell
       files:
          - path: "#tabs"
            action: close
          - path: "code/ch03/ScannerBug.java"
            panel: 0
            action: open
          - path: "#terminal: clear"
            panel: 1
            action: open
    
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
    transformations:
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!}(sh .guides/bg.sh javac code/ch03/exercise.java java -cp code/ch03/ exercise )
          
        position : 846
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!}(sh .guides/bg.sh javac code/ch03/exercise.java java -cp code/ch03/ exercise )
          
        position : 848
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!}(sh .guides/bg.sh javac code/ch03/exercise.java java -cp code/ch03/ exercise )
          
        position : 851
      - add: |
          See the example java code in the left pane. To compile and run the code, press the "Run"!
          {Run!}(sh .guides/bg.sh javac code/ch03/exercise.java java -cp code/ch03/ exercise )
          
        position : 854
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
    
  - name: "Methods and Testing"
    type: chapter
  - name: "Defining New Methods"
    type: section
    transformations:
        - add:  |
                  [View the highlighted the code](open_file code/ch04/NewLine.java panel=0 ref="public static" count=7)
                  [Remove the highlight](open_file code/ch04/NewLine.java panel=0)
          position: 25
        - add: |
             See the example java code in the left pane. To compile and run the code, press the "Run"!
             {Run!}(sh .guides/bg.sh javac code/ch04/NewLine.java java -cp code/ch04/ NewLine )
          
          position : 84
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch04/NewLine.java"
            panel: 0
            action: open
    
  - name: "Flow of Execution"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Parameters and Arguments"
    type: section
    transformations:
        - add:  |
                  [View the highlighted the code](open_file code/ch04/PrintTwice.java panel=0 ref="String message" count=7)
                  [Remove the highlight](open_file code/ch04/PrintTwice.java panel=0)
          position: 197
        - add: |
              See the example java code in the left pane. To compile and run the code, press the "Run"!
              {Run!}(sh .guides/bg.sh javac code/ch04/PrintTwice.java java -cp code/ch04/ PrintTwice )
          
          position : 203
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch04/PrintTwice.java"
            panel: 0
            action: open
  - name: "Multiple Parameters"
    type: section
    transformations:
      - add: |
              See the example java code in the left pane. To compile and run the code, press the "Run"!
              {Run!}(sh .guides/bg.sh javac code/ch04/printTime.java java -cp code/ch04/ printTime)
          
        position : 323
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch04/printTime.java"
            panel: 0
            action: open
  - name: "Stack Diagrams"
    type: section
    transformations:
        - remove: 1
          position: 365
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
          
  - name: "Math Methods"
    type: section
    transformations:
        - remove: 2
          position: 429
        - add:  |
                  [View the highlighted the code](open_file code/ch04/MathMethods.java panel=0 ref="double root" count=3)
                  [Remove the highlight](open_file code/ch04/MathMethods.java panel=0)
          position: 380
          
        - add:  |
                  [View the highlighted the code](open_file code/ch04/MathMethods.java panel=0 ref="double degrees" count=2)
                  [Remove the highlight](open_file code/ch04/MathMethods.java panel=0)
          position: 398
        - add:  |
                  [View the highlighted the code](open_file code/ch04/MathMethods.java panel=0 ref="double radians" count=2)
                  [Remove the highlight](open_file code/ch04/MathMethods.java panel=0)
          position: 410
        - add:  |
                  [View the highlighted the code](open_file code/ch04/MathMethods.java panel=0 ref="long x" count=2)
                  [Remove the highlight](open_file code/ch04/MathMethods.java panel=0)
          position: 421
        - add: |
              See the example java code in the left pane. To compile and run the code, press the "Run"!
              {Run!}(sh .guides/bg.sh javac code/ch04/MathMethods.java java -cp code/ch04/ MathMethods)
          
          position : 418
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch04/MathMethods.java"
            panel: 0
            action: open
  - name: "Composition"
    type: section
    transformations:
        - add: |
              See the example java code in the left pane. To compile and run the code, press the "Run"!
              {Run!}(sh .guides/bg.sh javac code/ch04/Composition.java java -cp code/ch04/ Composition)
          
          position : 476
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Return Values"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Incremental Development"
    type: section
    transformations:
        - add:  |
                  [View the highlighted the code](open_file code/ch04/Distance.java panel=0 ref="public static double" count=3)
                  [Remove the highlight](open_file code/ch04/Distance.java panel=0)
          position: 612
        - add:  |
                   [View the highlighted the code](open_file code/ch04/Distance.java panel=0 ref="public static double" count=7)
                   [Remove the highlight](open_file code/ch04/Distance.java panel=0)
          position: 643
          
        - add:  |
                   [View the highlighted the code](open_file code/ch04/Distance.java panel=0 ref="public static" count=7)
                   [Remove the highlight](open_file code/ch04/Distance.java panel=0)
          position: 663
        - add:  |
                   [View the highlighted the code](open_file code/ch04/Distance.java panel=0 ref="public static" count=7)
                   [Remove the highlight](open_file code/ch04/Distance.java panel=0)

          position: 677
        - add: |
              See the example java code in the left pane. To compile and run the code, press the "Run"!
              {Run!}(sh .guides/bg.sh javac code/ch04/Distance.java java -cp code/ch04/ Distance)
          
          position : 690
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch04/Distance.java"
            panel: 0
            action: open
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs#"
            action: close
  - name: "Exercises"
    type: section
  - name: "Conditionals and Logic"
    type: chapter
  - name: "Relational Operators"
    type: section
  - name: "The if-else Statement"
    type: section
  - name: "Chaining and Nesting"
    type: section
  - name: "The switch Statement"
    type: section
  - name: "Logical Operators"
    type: section
  - name: "De Morgan's Laws"
    type: section
  - name: "Boolean Variables"
    type: section
  - name: "Boolean Methods"
    type: section
  - name: "Validating Input"
    type: section
  - name: "Example Program"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Loops and Strings"
    type: chapter
  - name: "The while Statement"
    type: section
  - name: "Increment and Decrement"
    type: section
  - name: "The for Statement"
    type: section
  - name: "Nested Loops"
    type: section
  - name: "Characters"
    type: section
  - name: "Which Loop to Use"
    type: section
  - name: "String Iteration"
    type: section
  - name: "The indexOf Method"
    type: section
  - name: "Substrings"
    type: section
  - name: "String Comparison"
    type: section
  - name: "String Formatting"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays and References"
    type: chapter
  - name: "Creating Arrays"
    type: section
  - name: "Accessing Elements"
    type: section
  - name: "Displaying Arrays"
    type: section
  - name: "Copying Arrays"
    type: section
  - name: "Traversing Arrays"
    type: section
  - name: "Random Numbers"
    type: section
  - name: "Building a Histogram"
    type: section
  - name: "The Enhanced for Loop"
    type: section
  - name: "Counting Characters"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Recursive Methods"
    type: chapter
  - name: "Recursive Void Methods"
    type: section
  - name: "Recursive Stack Diagrams"
    type: section
  - name: "Value-Returning Methods"
    type: section
  - name: "The Leap of Faith"
    type: section
  - name: "Counting Up Recursively"
    type: section
  - name: "Binary Number System"
    type: section
  - name: "Recursive Binary Method"
    type: section
  - name: "CodingBat Problems"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Immutable Objects"
    type: chapter
  - name: "Primitives vs Objects"
    type: section
  - name: "The null Keyword"
    type: section
  - name: "Strings Are Immutable"
    type: section
  - name: "Wrapper Classes"
    type: section
  - name: "Command-Line Arguments"
    type: section
  - name: "Argument Validation"
    type: section
  - name: "BigInteger Arithmetic"
    type: section
  - name: "Incremental Design"
    type: section
  - name: "More Generalization"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Mutable Objects"
    type: chapter
  - name: "Point Objects"
    type: section
  - name: "Objects as Parameters"
    type: section
  - name: "Objects as Return Values"
    type: section
  - name: "Rectangles Are Mutable"
    type: section
  - name: "Aliasing Revisited"
    type: section
  - name: "Java Library Source"
    type: section
  - name: "Class Diagrams"
    type: section
  - name: "Scope Revisited"
    type: section
  - name: "Garbage Collection"
    type: section
  - name: "Mutable vs Immutable"
    type: section
  - name: "StringBuilder Objects"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Designing Classes"
    type: chapter
  - name: "The Time Class"
    type: section
  - name: "Constructors"
    type: section
  - name: "Value Constructors"
    type: section
  - name: "Getters and Setters"
    type: section
  - name: "Displaying Objects"
    type: section
  - name: "The toString Method"
    type: section
  - name: "The equals Method"
    type: section
  - name: "Adding Times"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Objects"
    type: chapter
  - name: "Card Objects"
    type: section
  - name: "Card toString"
    type: section
  - name: "Class Variables"
    type: section
  - name: "The compareTo Method"
    type: section
  - name: "Cards Are Immutable"
    type: section
  - name: "Arrays of Cards"
    type: section
  - name: "Sequential Search"
    type: section
  - name: "Binary Search"
    type: section
  - name: "Tracing the Code"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Objects of Arrays"
    type: chapter
  - name: "Decks of Cards"
    type: section
  - name: "Shuffling Decks"
    type: section
  - name: "Selection Sort"
    type: section
  - name: "Merge Sort"
    type: section
  - name: "Subdecks"
    type: section
  - name: "Merging Decks"
    type: section
  - name: "Adding Recursion"
    type: section
  - name: "Static Context"
    type: section
  - name: "Piles of Cards"
    type: section
  - name: "Playing War"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Extending Classes"
    type: chapter
  - name: "CardCollection"
    type: section
  - name: "Inheritance"
    type: section
  - name: "Dealing Cards"
    type: section
  - name: "The Player Class"
    type: section
  - name: "The Eights Class"
    type: section
  - name: "Class Relationships"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Arrays"
    type: chapter
  - name: "Conway's Game of Life"
    type: section
  - name: "The Cell Class"
    type: section
  - name: "Two-Dimensional Arrays"
    type: section
  - name: "The GridCanvas Class"
    type: section
  - name: "Other Grid Methods"
    type: section
  - name: "Starting the Game"
    type: section
  - name: "The Simulation Loop"
    type: section
  - name: "Exception Handling"
    type: section
  - name: "Counting Neighbors"
    type: section
  - name: "Updating the Grid"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Reusing Classes"
    type: chapter
  - name: "Langton's Ant"
    type: section
  - name: "Refactoring"
    type: section
  - name: "Abstract Classes"
    type: section
  - name: "UML Diagram"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Advanced Topics"
    type: chapter
  - name: "Polygon Objects"
    type: section
  - name: "Adding Color"
    type: section
  - name: "Regular Polygons"
    type: section
  - name: "More Constructors"
    type: section
  - name: "An Initial Drawing"
    type: section
  - name: "Blinking Polygons"
    type: section
  - name: "Interfaces"
    type: section
  - name: "Event Listeners"
    type: section
  - name: "Timers"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Tools"
    type: chapter
  - name: "Installing DrJava"
    type: section
  - name: "DrJava Interactions"
    type: section
  - name: "Command-Line Interface"
    type: section
  - name: "Command-Line Testing"
    type: section
  - name: "Running Checkstyle"
    type: section
  - name: "Tracing with a Debugger"
    type: section
  - name: "Testing with JUnit"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Javadoc"
    type: chapter
  - name: "Reading Documentation"
    type: section
  - name: "Writing Documentation"
    type: section
  - name: "Javadoc Tags"
    type: section
  - name: "Example Source File"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Graphics"
    type: chapter
  - name: "Creating Graphics"
    type: section
  - name: "Graphics Methods"
    type: section
  - name: "Example Drawing"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Debugging"
    type: chapter
  - name: "Compile-Time Errors"
    type: section
  - name: "Run-Time Errors"
    type: section
  - name: "Logic Errors"
    type: section
insert_sections:
  - name: Exercises 1.1
    type: Exercises
    chapter: Input and output
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex3.1

      When you use \java{printf}, the Java compiler does not check your format string.
      See what happens if you try to display a value with type \java{int} using \java{\%f}.
      And what happens if you display a \java{double} using \java{\%d}?
      What if you use two format specifiers, but then provide only one value?

      \end{exercise}
  - name: Exercises 1.2
    type: Exercises
    chapter: Input and output
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex3.2

      Write a program that converts a temperature from Celsius to Fahrenheit.
      It should (1) prompt the user for input, (2) read a \java{double} value from the keyboard, (3) calculate the result, and (4) format the output to one decimal place.
      When it's finished, it should work like this:

      \begin{stdout}
      Enter a temperature in Celsius: 24
      24.0 C = 75.2 F
      \end{stdout}

      Here is the formula to do the conversion:
      %
      \[ F = C \times \frac{9}{5} + 32 \]
      %
      {\em Hint:} Be careful not to use integer division!

      \end{exercise}
  - name: Exercises 1.3
    type: Exercises
    chapter: Input and output
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex3.3

      Write a program that converts a total number of seconds to hours, minutes, and seconds.
      It should (1) prompt the user for input, (2) read an integer from the keyboard, (3) calculate the result, and (4) use \java{printf} to display the output.
      For example, {\tt "5000 seconds = 1 hours, 23 minutes, and 20 seconds"}.

      {\em Hint:} Use the remainder operator.

      \end{exercise}
  - name: Exercises 1.2
    type: Exercises
    chapter: Input and output
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex3.4
      \label{guess}

      The goal of this exercise is to program a {\it Guess My Number} game.
      When it's finished, it should work like this:

      \begin{stdout}
      I'm thinking of a number between 1 and 100
      (including both). Can you guess what it is?
      Type a number: 45
      Your guess is: 45
      The number I was thinking of is: 14
      You were off by: 31
      \end{stdout}

      To choose a random number, you can use the \java{Random} class in \java{java.util}.
      Here's how it works:

      \index{GuessStarter.java}

      \begin{trinket}{GuessStarter.java}
      import java.util.Random;

      public class GuessStarter {

          public static void main(String[] args) {
              // pick a random number
              Random random = new Random();
              int number = random.nextInt(100) + 1;
              System.out.println(number);
          }
      }
      \end{trinket}

      \index{new}
      \index{operator!new}

      Like the \java{Scanner} class in this chapter, \java{Random} has to be imported before we can use it.
      And as with \java{Scanner}, we have to use the \java{new} operator to create a \java{Random} (number generator).

      Then we can use the method \java{nextInt} to generate a random number.
      In this example, the result of \java{nextInt(100)} will be between 0 and 99, including both.
      Adding 1 yields a number between 1 and 100, including both.

      \begin{enumerate}

      \item The definition of \java{GuessStarter} is in a file called {\it GuessStarter.java}, in the directory called {\it ch03}, in the repository for this book.
      %Instructions for downloading this code are on page~\pageref{code}.

      \item Compile and run this program.

      \item Modify the program to prompt the user; then use a \java{Scanner} to read a line of user input.
      Compile and test the program.

      \item Read the user input as an integer and display the result.
      Again, compile and test.

      \item Compute and display the difference between the user's guess and the number that was generated.

      \end{enumerate}

      \end{exercise}
      
  - name: Exercises 1.1
    type: Exercises
    chapter: Methods and Testing
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex4.3

      The purpose of this exercise is to take code from a previous exercise and redesign it as a method that takes parameters.
      Start with a working solution to Exercise~\ref{ex:date}.

      \vspace{-1em}
      \begin{enumerate}

      \item Write a method called \java{printAmerican} that takes the day, date, month, and year as parameters and displays them in American format.

      \item Test your method by invoking it from \java{main} and passing appropriate arguments.
      The output should look something like this (except the date might be different):

      \begin{stdout}
      Monday, July 22, 2019
      \end{stdout}

      \item Once you have debugged \java{printAmerican}, write another method called \java{printEuropean} that displays the date in European format.

      \end{enumerate}
      \vspace{1ex}

      \end{exercise}
  
  - name: Exercises 1.2
    type: Exercises
    chapter: Methods and Testing
    section: Exercises
    latex: |
      \begin{exercise}  %%V6 Ex4.1

      %The point of this exercise is to practice reading code and to make sure that you understand the flow of execution through a program with multiple methods.
      Answer the following questions without running the program on a computer.

      \begin{enumerate}

      \item Draw a stack diagram that shows the state of the program the first time \java{ping} is invoked.

      \item What is output by the following program?
      Be precise about the placement of spaces and newlines.

      %{\em Hint:} Start by describing in words what \java{ping} and \java{baffle} output.

      %\item What happens if you invoke \java{baffle();} at the end of the \java{ping} method? (We will see why in Section~\ref{recursion}.)

      \end{enumerate}

      \begin{code}
      public static void zoop() {
          baffle();
          System.out.print("You wugga ");
          baffle();
      }
      \end{code}

      \begin{code}
      public static void main(String[] args) {
          System.out.print("No, I ");
          zoop();
          System.out.print("I ");
          baffle();
      }
      \end{code}

      \begin{code}
      public static void baffle() {
          System.out.print("wug");
          ping();
      }
      \end{code}

      \begin{code}
      public static void ping() {
          System.out.println(".");
      }
      \end{code}

      \end{exercise}  
      
  - name: Exercises 1.3
    type: Exercises
    chapter: Methods and Testing
    section: Exercises
    before: false
    latex: |
        \begin{exercise}  %%V6 Ex6.1

        If you have a question about whether something is legal, and what happens if it is not, a good way to find out is to ask the compiler.
        Answer the following questions by trying them out.

        \begin{enumerate}

        \item What happens if you invoke a value method and don't do anything with the result; that is, if you don't assign it to a variable or use it as part of a larger expression?

        \item What happens if you use a void method as part of an expression?
        For example, try \java{System.out.println("boo!") + 7;}.

        \end{enumerate}

        \end{exercise}
        
  - name: Exercises 1.4
    type: Exercises
    chapter: Methods and Testing
    section: Exercises
    before: false
    latex: |
         \begin{exercise}  %%V6 Ex5.2

          Draw a stack diagram that shows the state of the program the {\em second} time \java{zoop} is invoked.
          What is the complete output?

          %TODO remove if/else (and bob) from this method?
          \begin{code}
          public static void zoop(String fred, int bob) {
              System.out.println(fred);
              if (bob == 5) {
                  ping("not ");
              } else {
                  System.out.println("!");
              }
          }
          \end{code}

          \begin{code}
          public static void main(String[] args) {
              int bizz = 5;
              int buzz = 2;
              zoop("just for", bizz);
              clink(2 * buzz);
          }
          \end{code}

          \begin{code}
          public static void clink(int fork) {
              System.out.print("It's ");
              zoop("breakfast ", fork);
          }
          \end{code}

          \begin{code}
          public static void ping(String strangStrung) {
              System.out.println("any " + strangStrung + "more ");
          }
          \end{code}

          \end{exercise} 
          
  - name: Exercises 1.5
    type: Exercises
    chapter: Methods and Testing
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex6.4

      Many computations can be expressed more concisely using the ``multadd'' operation, which takes three operands and computes \java{a * b + c}.
      Some processors even provide a hardware implementation of this operation for floating-point numbers.

      \begin{enumerate}

      \item Create a new program called {\it Multadd.java}.

      \item Write a method called \java{multadd} that takes three \java{doubles} as parameters and returns \java{a * b + c}.

      \item Write a \java{main} method that tests \java{multadd} by invoking it with a few simple parameters, like \java{1.0, 2.0, 3.0}.

      \item Also in \java{main}, use \java{multadd} to compute the following values:
      %
      \begin{eqnarray*}
      & \sin \frac{\pi}{4} + \frac{\cos \frac{\pi}{4}}{2} & \\
      & \log 10 + \log 20 &
      \end{eqnarray*}

      \item Write a method called \java{expSum} that takes a double as a parameter and uses \java{multadd} to calculate:
      %
      \begin{eqnarray*}
      x e^{-x} + \sqrt{1 - e^{-x}}
      \end{eqnarray*}
      %
      {\em Hint:} The method for raising $e$ to a power is \java{Math.exp}.

      \end{enumerate}

      In the last part of this exercise, you need to write a method that invokes another method you wrote.
      Whenever you do that, it is a good idea to test the first method carefully before working on the second.
      Otherwise, you might find yourself debugging two methods at the same time, which can be difficult.

      One of the purposes of this exercise is to practice pattern-matching: the ability to recognize a specific problem as an instance of a general category of problems.

      \end{exercise}
