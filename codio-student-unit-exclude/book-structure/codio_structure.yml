workspace:
  directory: /home/codio/workspace/codio-student-unit-exclude/ThinkJava2
  tex: thinkjava2.tex
  #removes inline code examples that are full programs (they auto-generate code files)
  removeTrinket: true
metadata:
  hideMenu: false
  protectLayout: false
  suppressPageNumbering: true
refs:
  #Offsets chapter numbering to match physical book
  chapter_counter_from: 0
assets:
 - code
 - fig: "*.jpg"
sections:
  - name: "Preface"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Philosophy Behind the Book"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Object-Oriented Programming"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Changes to the Second Edition"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "About the Appendixes"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Using the Code Examples"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Acknowledgments"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Computer Programming"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is a Computer?"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "What Is Programming?"
    type: section
    transformations:
      - add: | 
              Here is a random line of text. 
        position: 105
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The Hello World Program -- TEST CHANGE"
    type: section
    transformations:
        - remove: 1
          position: 87
        - add:  |
                 See the example java code in the left pane. To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch01/Hello.java java -cp code/ch01/ Hello )

          position: 105
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch01/Hello.java"
            panel: 0
            action: open
  - name: "Compiling Java Programs"
    type: section
  - name: "Displaying Two Messages"
    type: section
  - name: "Formatting Source Code"
    type: section
  - name: "Using Escape Sequences"
    type: section
  - name: "What Is Computer Science?"
    type: section
  - name: "Debugging Programs"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Variables and Operators"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Declaring Variables"
    type: section
    transformations:
        - remove: 1
          position: 30
        - add: To store a value, you first have to 
          position: 30
        - add:  |
                 [declare a variable:](open_file code/ch02/DeclareAssign.java panel=0 ref="String message;" count=1)

          position: 30
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/DeclareAssign.java panel=0 count=1)

          position: 30
        - remove: 1
          position: 52
        - add: To declare an integer variable named x, see the 
          position: 52
        - add:  |
                 [left panel ](open_file code/ch02/DeclareAssign.java panel=0 ref="int x;" count=1)

          position: 52
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/DeclareAssign.java panel=0 count=1)

          position: 52
        - add: and below.
          position: 52
        - remove: 1
          position: 59
        - add: In general, you should use names that indicate what the variables
          position: 60
        - add:  |
                 [ mean.](open_file code/ch02/DeclareAssign.java panel=0 ref="String firstName;" count=3)

          position: 60
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/DeclareAssign.java panel=0 count=3)

          position: 60
        - remove: 1
          position: 84
        - add: You can see the full list of keywords at [https://thinkjava.org/keywords](open_preview https://thinkjava.org/keywords panel=0).
          position: 85
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/DeclareAssign.java"
            panel: 0
            action: open
  - name: "Assigning Variables"
    type: section
    transformations:
        - remove: 1
          position: 99
        - add: We do that with an **assignment**
          position: 100
        - add:  |
                 [ statement:](open_file code/ch02/DeclareAssign.java panel=0 ref="message " count=3)

          position: 100
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/DeclareAssign.java panel=0 count=3)

          position: 100
        - remove: 1
          position: 125
        - add: But that is not the same thing as the integer ```123``` as shown below and
          position: 126
        - add:  |
                 [ here:](open_file code/ch02/DeclareAssign.java panel=0 ref=""123";" count=2)

          position: 126
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/DeclareAssign.java panel=0 count=2)

          position: 126
        - remove: 1
          position: 136
        - add: You can also declare and initialize on the
          position: 137
        - add:  |
                 [ the same line:](open_file code/ch02/DeclareAssign.java panel=0 ref="String message2" count=3)

          position: 137
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/DeclareAssign.java panel=0 count=3)

          position: 137
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/DeclareAssign.java"
            panel: 0
            action: open 
  - name: "Memory Diagrams"
    type: section
    transformations:
        - remove: 1
          position: 172
        - add: In Java, an assignment statement can make two variables equal, but they don't have to stay
          position: 173
        - add:  |
                 [that way:](open_file code/ch02/MemoryDiagram.java panel=0 ref="int a" count=3)

          position: 173
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/MemoryDiagram.java panel=0 count=3)

          position: 173
        - remove: 1
          position: 202
        - add: For example, if we added the line ```int c = 0;``` 
          position: 203
        - add:  |
                 [ to the previous example, ](open_file code/ch02/MemoryDiagram.java panel=0 ref="int c" count=1)

          position: 203
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/MemoryDiagram.java panel=0 count=1)

          position: 203
        - add: the memory diagram would look like Figure 2.2.
          position: 203
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/MemoryDiagram.java"
            panel: 0
            action: open
  - name: "Printing Variables"
    type: section
    transformations:
        - remove: 1
          position: 217
        - add: The following statements declare a variable named ```firstLine```, assign it the value ```"Hello, again!"```, and
          position: 218
        - add:  |
                 [ display that value:](open_file code/ch02/PrintingVars.java panel=0 ref="String firstLine" count=2)

          position: 218
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/PrintingVars.java panel=0 count=2)

          position: 218
        - remove: 1
          position: 231
        - add: To display the name of a variable, you have to put it in
          position: 232
        - add:  |
                 [ quotes:](open_file code/ch02/PrintingVars.java panel=0 ref="The value" count=2)

          position: 232
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/PrintingVars.java panel=0 count=2)

          position: 232
        - remove: 1
          position: 246
        - add:  |
                 [For example:](open_file code/ch02/PrintingVars.java panel=0 ref="int hour" count=7)

          position: 247
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/PrintingVars.java panel=0 count=7)

          position: 247
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/PrintingVars.java"
            panel: 0
            action: open
  - name: "Arithmetic Operators"
    type: section
    transformations:
        - remove: 1
          position: 283
        - add: The following program converts a time of day to
          position: 284
        - add:  |
                 [ minutes:](open_file code/ch02/PrintingVars.java panel=0 ref="midnight:" count=2)

          position: 284
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/PrintingVars.java panel=0 count=2)

          position: 284
        - remove: 1
          position: 315
        - add: For example, the following fragment tries to compute the fraction of an hour that
          position: 316
        - add:  |
                 [  has elapsed:](open_file code/ch02/PrintingVars.java panel=0 ref="Fraction of" count=2)

          position: 316
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/PrintingVars.java panel=0 count=2)

          position: 316
        - remove: 1
          position: 336
        - add: As an alternative, we can calculate a percentage rather than
          position: 337
        - add:  |
                 [ a fraction:](open_file code/ch02/PrintingVars.java panel=0 ref="Percent of" count=2)

          position: 337
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/PrintingVars.java panel=0 count=2)

          position: 337
    configuration: 
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/PrintingVars.java"
            panel: 0
            action: open
  - name: "Floating-Point Numbers"
    type: section
    transformations:
        - remove: 1
          position: 362
        - add: You can create ```double``` variables and assign values to them the same way we did for the
          position: 363
        - add:  |
                 [ other types:](open_file code/ch02/FloatingPoint.java panel=0 ref="double pi;" count=2)

          position: 363
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/FloatingPoint.java panel=0 count=2)

          position: 363
        - remove: 1
          position: 372
        - add: So we can solve the problem from the
          position: 373
        - add:  |
                 [ previous section:](open_file code/ch02/FloatingPoint.java panel=0 ref="double minute" count=3)

          position: 373
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/FloatingPoint.java panel=0 count=3)

          position: 373
        - remove: 1
          position: 421
        - add: The following sets ```y``` to ```0.333333```,
          position: 422
        - add:  |
                 [ as expected:](open_file code/ch02/FloatingPoint.java panel=0 ref="double y" count=2)

          position: 422
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/FloatingPoint.java panel=0 count=2)

          position: 422
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/FloatingPoint.java"
            panel: 0
            action: open
  - name: "Rounding Errors"
    type: section
    transformations:
        - remove: 1
          position: 472
        - add: For example, consider a bank account with a balance of
          position: 473
        - add:  |
                 [ $123.45:](open_file code/ch02/FloatingPoint.java panel=0 ref="double balance" count=1)

          position: 473
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/FloatingPoint.java panel=0 count=1)

          position: 473
        - remove: 1
          position: 480
        - add: You can avoid the problem by representing the balance as
          position: 481
        - add:  |
                 [ an integer:](open_file code/ch02/FloatingPoint.java panel=0 ref="int balance" count=1)

          position: 481
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/FloatingPoint.java panel=0 count=1)

          position: 481
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/FloatingPoint.java"
            panel: 0
            action: open
  - name: "Operators for Strings"
    type: section
    transformations:
        - remove: 1
          position: 514
        - add: Since addition is defined for both numbers and strings, Java performs automatic conversions you may not
          position: 515
        - add:  |
                 [ expect:](open_file code/ch02/StringConcat.java panel=0 ref="System.out.println" count=5)

          position: 515
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch02/StringConcat.java panel=0 count=5)

          position: 515
        - add:  |
                 To compile and run the code, press the "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch02/StringConcat.java java -cp code/ch02/ StringConcat )

          position: 528
        - remove: 1
          position: 556
        - add: See the official Java tutorials for a complete table of operator precedence ( [https://thinkjava.org/operators](open_preview https://thinkjava.org/operators panel=0) ).
          position: 557
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/StringConcat.java"
            panel: 0
            action: open
  - name: "Compiler Error Messages"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Other Types of Errors"
    type: section
    transformations:
        - remove: 6
          position: 684 
        - add:  |
                 To compile and run the code, press the "Run!". 
                 {Run!}(sh .guides/bg.sh javac code/ch02/Hello.java java -cp code/ch02/ Hello )

          position: 683
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/Hello.java"
            panel: 0
            action: open
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
    transformations:
        - remove: 77
          position: 788
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercise 2.1"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/exercise2_1.java"
            panel: 0
            action: open
  - name: "Exercise 2.2"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/exercise2_2.java"
            panel: 0
            action: open
  - name: "Exercise 2.3"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch02/exercise2_3.java"
            panel: 0
            action: open
  - name: "Input and Output"
    type: chapter
  - name: "The System Class"
    type: section
  - name: "The Scanner Class"
    type: section
  - name: "Language Elements"
    type: section
  - name: "Literals and Constants"
    type: section
  - name: "Formatting Output"
    type: section
  - name: "Reading Error Messages"
    type: section
  - name: "Type Cast Operators"
    type: section
  - name: "Remainder Operator"
    type: section
  - name: "Putting It All Together"
    type: section
  - name: "The Scanner Bug"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Methods and Testing"
    type: chapter
  - name: "Defining New Methods"
    type: section
  - name: "Flow of Execution"
    type: section
  - name: "Parameters and Arguments"
    type: section
  - name: "Multiple Parameters"
    type: section
  - name: "Stack Diagrams"
    type: section
  - name: "Math Methods"
    type: section
  - name: "Composition"
    type: section
  - name: "Return Values"
    type: section
  - name: "Incremental Development"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Conditionals and Logic"
    type: chapter
  - name: "Relational Operators"
    type: section
  - name: "The if-else Statement"
    type: section
  - name: "Chaining and Nesting"
    type: section
  - name: "The switch Statement"
    type: section
  - name: "Logical Operators"
    type: section
  - name: "De Morgan's Laws"
    type: section
  - name: "Boolean Variables"
    type: section
  - name: "Boolean Methods"
    type: section
  - name: "Validating Input"
    type: section
  - name: "Example Program"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Loops and Strings"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "The while Statement"
    type: section
    transformations:
        - remove: 1
          position: 20
        - add: Using a ```while``` statement, we can repeat the same code
          position: 21
        - add:  |
                 [ multiple times:](open_file code/ch06/Loops.java panel=0 ref="countdown" count=7)
                 
          position: 21
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Loops.java panel=0 count=7)
                 
          position: 21
        - add:  |
                 To see the output of this function, comment out all other code in the main function besides lines 67 and 68. Press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Loops.java java -cp code/ch06/ Loops )
          
          position: 31
        - remove: 1
          position: 89
        - add: For example, this loop continues until ```n``` is 1 (which makes the condition
          position: 90
        - add:  |
                 [ false):](open_file code/ch06/Loops.java panel=0 ref="sequence" count=11)

          position: 90
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Loops.java panel=0 count=11)

          position: 90
        - add:  |
                 To see the output of this function, comment out all other code in the main function besides lines 70 and 71. Press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Loops.java java -cp code/ch06/ Loops )
          
          position: 102
        - remove: 1
          position: 113
        - add: For more information, see [https://en.wikipedia.org/wiki/Collatz_conjecture](open_preview https://en.wikipedia.org/wiki/Collatz_conjecture) .
          position: 114
        - remove: 8
          position: 35
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Loops.java"
            panel: 0
            action: open
  - name: "Increment and Decrement"
    type: section
    transformations:
        - remove: 1
          position: 119
        
        - add:  |
                 Here is another ```while``` loop example; this one displays the numbers
                 [ 1 to 5:](open_file code/ch06/Loops.java panel=0 ref="plusplus" count=7)

          position: 120
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Loops.java panel=0 count=7)

          position: 120
        - add:  |
                 To see the output of this function, comment out all other code in the main function besides lines 73 and 74. Press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Loops.java java -cp code/ch06/ Loops )

          position: 129
        - remove: 1
          position: 140
        - add:  |
                 For example, ```i += 2``` increments 
                 [ i by 2:](open_file code/ch06/Loops.java panel=0 ref="appreciate" count=9)

          position: 141
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Loops.java panel=0 count=9)

          position: 141
        - add:  |
                 To see the output of this function, comment out all other code in the main function besides lines 76 and 77. Press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Loops.java java -cp code/ch06/ Loops )

          position: 151
        - remove: 5
          position: 151
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Loops.java"
            panel: 0
            action: open
  - name: "The for Statement"
    type: section
    transformations:
        - remove: 1
          position: 171
        - add: For example, we can rewrite the 2-4-6-8 loop
          position: 172
        - add:  |
                 [ this way:](open_file code/ch06/Loops.java panel=0 ref="appreciate2" count=6)

          position: 172
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Loops.java panel=0 count=6)

          position: 172
        - add:  |
                 To see the output of this function, comment out all other code in the main function besides lines 79 and 80. Press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Loops.java java -cp code/ch06/ Loops )

          position: 180
        - remove: 1
          position: 220
        - add: If you need to use a loop variable outside the loop, you have to declare it {\em outside} the loop,
          position: 221
        - add:  |
                 [ like this:](open_file code/ch06/Loops.java panel=0 ref="loopvar" count=7)

          position: 221
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Loops.java panel=0 count=7)

          position: 221
        - add:  |
                 To see the output of this function, comment out all other code in the main function besides lines 82 and 83. Press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Loops.java java -cp code/ch06/ Loops )

          position: 230
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Loops.java"
            panel: 0
            action: open
  - name: "Nested Loops"
    type: section
    transformations:
        - remove: 1
          position: 242
        - add: For example, we can generate a ``multiplication table''
          position: 243
        - add:  |
                 [ like this:](open_file code/ch06/Loops.java panel=0 ref="nested" count=8)

          position: 243
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Loops.java panel=0 count=8)

          position: 243
        - add:  |
                 To see the output of this function, comment out all other code in the main function besides lines 85 and 86. Press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Loops.java java -cp code/ch06/ Loops )

          position: 253
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Loops.java"
            panel: 0
            action: open
  - name: "Characters"
    type: section
    transformations:
        - remove: 1
          position: 300
        - add: It returns a ```char```, a data type that stores
          position: 301
        - add:  |
                 [ an individual character (as opposed to strings of them):](open_file code/ch06/Strings1.java panel=0 ref="fruit" count=2)

          position: 301
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings1.java panel=0 count=2)
          position: 301
        - remove: 8
          position: 311
        - add: |

                
                | b  | a  | n  | a  | n  | a  |
                |----|----|----|----|----|----|
                |  0 |  1 |  2 |  3 |  4 | 5  |
                
          position: 320
        - remove: 1
          position: 321
        - add: You can compare them using
          position: 322
        - add:  |
                 [ relational operators:](open_file code/ch06/Strings1.java panel=0 ref="if" count=3)

          position: 322
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings1.java panel=0 count=3)

          position: 322
        - add:  |
                 To compile and run this statement, press "Run!". Edit the index value for ```fruit.charAt(0);``` to see how the output may change.
                 {Run!}(sh .guides/bg.sh javac code/ch06/Strings1.java java -cp code/ch06/ Strings1 )

          position: 329
        - remove: 1
          position: 337
        - add: So this loop displays the letters of the
          position: 338
        - add:  |
                 [ alphabet:](open_file code/ch06/Strings2.java panel=0 ref="Roman" count=5)

          position: 338
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings2.java panel=0 count=5)

          position: 338          
        - remove: 5
          position: 347
        - remove: 1
          position: 356
        - add: You can read more about it at the Unicode website [https://unicode.org/](open_preview https://unicode.org/ panel=0) .
          position: 357
        - remove: 1
          position: 359
        - add: The code points for uppercase Greek letters run from 913 to 937, so we can display the Greek alphabet
          position: 360
        - add:  |
                 [ like this:](open_file code/ch06/Strings2.java panel=0 ref="Greek" count=5)

          position: 360
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings2.java panel=0 count=5)

          position: 360
        - add:  |
                 To compile and run this statement, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Strings2.java java -cp code/ch06/ Strings2 )

          position: 369
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Strings1.java"
            panel: 0
            action: open      
          - path: "code/ch06/Strings2.java"
            panel: 0
            action: open  
  - name: "Which Loop to Use"
    type: section
    transformations:
        - remove: 1
          position: 396
        - add: In this case, a ```while``` loop is more
          position: 397
        - add:  |
                 [ appropriate:](open_file code/ch06/Strings3.java panel=0 ref="Enter a number" count=7)

          position: 397
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings3.java panel=0 count=7)

          position: 397
        - add:  |
                 To compile and run this statement, press "Run!"
                 {try it|terminal}(javac code/ch06/Strings3.java &&java -cp code/ch06/ Strings3 )

          position: 409
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Strings3.java"
            panel: 0
            action: open
          - path: "#terminal: echo \"hello\""
            panel: 1
            action: open
  - name: "String Iteration"
    type: section
    transformations:
        - remove: 1
          position: 416
        - add: The following loop iterates the characters in ```fruit``` and displays them, one on
          position: 417
        - add:  |
                 [ each line:](open_file code/ch06/Strings4.java panel=0 ref=" for " count=4)

          position: 417
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings4.java panel=0 count=4)

          position: 417
        - remove: 1
          position: 444
        - add: To get the last character, you have to
          position: 445
        - add:  |
                 [ subtract 1:](open_file code/ch06/Strings4.java panel=0 ref=" length " count=2)

          position: 445
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings4.java panel=0 count=2)

          position: 445
        - add: from ```length``` .
          position: 445
        - remove: 1
          position: 452
        - add: For example, to reverse a string, we can concatenate one character
          position: 453
        - add:  |
                 [ at a time:](open_file code/ch06/Strings4.java panel=0 ref="String reverse" count=7)

          position: 453
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings4.java panel=0 count=7)

          position: 453
        - add:  |
                 To compile and run this statement, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Strings4.java java -cp code/ch06/ Strings4 )

          position: 466
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Strings4.java"
            panel: 0
            action: open
  - name: "The indexOf Method"
    type: section
    transformations:
        - remove: 1
          position: 478
        - add: However, the ```String``` class already provides a method for doing
          position: 479
        - add:  |
                 [ just that:](open_file code/ch06/Strings5.java panel=0 ref="String fruit" count=2)

          position: 479
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings5.java panel=0 count=1)

          position: 479
        - remove: 1
          position: 489
        - add: To find subsequent appearances, you can use another version of ```indexOf```, which takes a second argument that indicates where in the string to
          position: 490
        - add:  |
                 [ start looking:](open_file code/ch06/Strings5.java panel=0 ref=", 2)" count=1)

          position: 490
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings5.java panel=0 count=1)

          position: 490
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Strings5.java"
            panel: 0
            action: open
  - name: "Substrings"
    type: section
    transformations:
        - remove: 1
          position: 533
        - add: The ```substring``` method returns a new string that copies letters from an existing string, given a
          position: 534
        - add:  |
                 [ pair of indexes:](open_file code/ch06/Strings5.java panel=0 ref="fruit.substring" count=3)

          position: 534
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings5.java panel=0 count=3)

          position: 534
        - remove: 1
          position: 550
        - add: If it is invoked with one argument, it returns the letters from that index
          position: 551
        - add:  |
                 [ to the end:](open_file code/ch06/Strings5.java panel=0 ref="fruit.substring" count=7)

          position: 551
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings5.java panel=0 count=7)

          position: 551
        - add:  |
                 To compile and run this statement, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Strings5.java java -cp code/ch06/ Strings5 )

          position: 564
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Strings5.java"
            panel: 0
            action: open
  - name: "String Comparison"
    type: section
    transformations:
        - remove: 1
          position: 590
        - add: The correct way to compare strings is with the ```equals``` method,
          position: 591
        - add:  |
                 [ like this:](open_file code/ch06/Strings6.java panel=0 ref="answer.equals" count=3)

          position: 591
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings6.java panel=0 count=3)

          position: 591
        - remove: 1
          position: 603
        - add: If two strings differ, we can use ```compareTo``` to see which comes first in
          position: 604
        - add:  |
                 [ alphabetical order:](open_file code/ch06/Strings6.java panel=0 ref="Alan Turing" count=14)

          position: 604
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Strings6.java panel=0 count=14)

          position: 604
        - add:  |
                 To compile and run this statement, press "Try It!"
                 {try it|terminal}(javac code/ch06/Strings6.java &&java -cp code/ch06 Strings6 ) 
                 
          position: 631
    configuration:
      layout: 3-cell
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Strings6.java"
            panel: 0
            action: open
          - path: "#terminal: echo \"hello\""
            panel: 1
            action: open
  - name: "String Formatting"
    type: section
    transformations:
        - remove: 1
          position: 638
        - add: For example, the following method returns a time string in
          position: 639
        - add:  |
                 [ 12-hour format:](open_file code/ch06/Format.java panel=0 ref="public static" count=13)

          position: 639
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch06/Format.java panel=0 count=13)

          position: 639
        - add:  |
                 To compile and run this statement, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch06/Format.java java -cp code/ch06/ Format )

          position: 669
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/Format.java"
            panel: 0
            action: open
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
    transformations:
        - remove: 138
          position: 720
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercise 6.1"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercise 6.2"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/exercise6_2.java"
            panel: 0
            action: open
  - name: "Exercise 6.3"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/exercise6_3.java"
            panel: 0
            action: open
  - name: "Exercise 6.4"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/exercise6_4.java"
            panel: 0
            action: open
  - name: "Exercise 6.5"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/exercise6_5.java"
            panel: 0
            action: open
  - name: "Exercise 6.6"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch06/exercise6_6.java"
            panel: 0
            action: open
  - name: "Arrays and References"
    type: chapter
  - name: "Creating Arrays"
    type: section
  - name: "Accessing Elements"
    type: section
  - name: "Displaying Arrays"
    type: section
  - name: "Copying Arrays"
    type: section
  - name: "Traversing Arrays"
    type: section
  - name: "Random Numbers"
    type: section
  - name: "Building a Histogram"
    type: section
  - name: "The Enhanced for Loop"
    type: section
  - name: "Counting Characters"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Recursive Methods"
    type: chapter
  - name: "Recursive Void Methods"
    type: section
  - name: "Recursive Stack Diagrams"
    type: section
  - name: "Value-Returning Methods"
    type: section
  - name: "The Leap of Faith"
    type: section
  - name: "Counting Up Recursively"
    type: section
  - name: "Binary Number System"
    type: section
  - name: "Recursive Binary Method"
    type: section
  - name: "CodingBat Problems"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Immutable Objects"
    type: chapter
  - name: "Primitives vs Objects"
    type: section
  - name: "The null Keyword"
    type: section
  - name: "Strings Are Immutable"
    type: section
  - name: "Wrapper Classes"
    type: section
  - name: "Command-Line Arguments"
    type: section
  - name: "Argument Validation"
    type: section
  - name: "BigInteger Arithmetic"
    type: section
  - name: "Incremental Design"
    type: section
  - name: "More Generalization"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Mutable Objects"
    type: chapter
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Point Objects"
    type: section
    transformations:
        - remove: 1
          position: 30
        - add: In order to use the ```Point``` class, you have to
          position: 31
        - add:  |
                 [ import it:](open_file code/ch10/PointObjects.java panel=0 ref="java.awt.Point" count=1)

          position: 31
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch10/PointObjects.java panel=0 count=1)

          position: 36
        - remove: 1
          position: 39
        - add: Then, to create a new point, you use the ```new```
          position: 40
        - add:  |
                 [ operator:](open_file code/ch10/PointObjects.java panel=0 ref="Point blank" count=2)

          position: 40
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch10/PointObjects.java panel=0 count=1)

          position: 46
        - remove: 1
          position: 80
        - add:  |
                 [For example:](open_file code/ch10/PointObjects.java panel=0 ref="int x" count=1)

          position: 81
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch10/PointObjects.java panel=0 count=1)

          position: 86
        - remove: 1
          position: 93
        - add:  |
                 [For example:](open_file code/ch10/PointObjects.java panel=0 ref="System" count=2)

          position: 94
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch10/PointObjects.java panel=0 count=1)

          position: 100
        - add:  |
                 To compile and run this statement, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch10/PointObjects.java java -cp code/ch10/ PointObjects )

          position: 100
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch10/PointObjects.java"
            panel: 0
            action: open
  - name: "Objects as Parameters"
    type: section
    transformations:
        - remove: 1
          position: 110
        - add:  |
                 [For example:](open_file code/ch10/ObjectPar.java panel=0 ref="printPoint" count=3)

          position: 111
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch10/ObjectPar.java panel=0 count=1)

          position: 120
        - remove: 1
          position: 123
        - add: As another example, we can rewrite the ```distance``` method from Section 4.6 so that it takes two ```Point```s as parameters instead of
          position: 124
        - add:  |
                 [ four doubles:](open_file code/ch10/ObjectPar.java panel=0 ref="double distance" count=4)

          position: 124
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch10/ObjectPar.java panel=0 count=4)

          position: 133
        - remove: 1
          position: 136
        - add: To compute the distance between two points, we invoke ```distance``` on one and pass the other as
          position: 137
        - add:  |
                 [ an argument:](open_file code/ch10/ObjectPar.java panel=0 ref="Point p1" count=5)

          position: 137
        - add:  |
                 [REMOVE HIGHLIGHT](open_file code/ch10/ObjectPar.java panel=0 count=5)

          position: 144
        - add:  |
                 To compile and run the highlighted statement, press "Run!"
                 {Run!}(sh .guides/bg.sh javac code/ch10/ObjectPar.java java -cp code/ch10/ ObjectPar )

          position: 144
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch10/ObjectPar.java"
            panel: 0
            action: open
  - name: "Objects as Return Values"
    type: section
    configuration:
      layout: 2-panels
      files:
          - path: "#tabs"
            action: close
          - path: "code/ch10/ObjectReturn.java"
            panel: 0
            action: open          
  - name: "Rectangles Are Mutable"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Aliasing Revisited"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Java Library Source"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Class Diagrams"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Scope Revisited"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Garbage Collection"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Mutable vs Immutable"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "StringBuilder Objects"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Vocabulary"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Exercises"
    type: section
    configuration:
      layout: 1-panel
      files:
          - path: "#tabs"
            action: close
  - name: "Designing Classes"
    type: chapter
  - name: "The Time Class"
    type: section
  - name: "Constructors"
    type: section
  - name: "Value Constructors"
    type: section
  - name: "Getters and Setters"
    type: section
  - name: "Displaying Objects"
    type: section
  - name: "The toString Method"
    type: section
  - name: "The equals Method"
    type: section
  - name: "Adding Times"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Objects"
    type: chapter
  - name: "Card Objects"
    type: section
  - name: "Card toString"
    type: section
  - name: "Class Variables"
    type: section
  - name: "The compareTo Method"
    type: section
  - name: "Cards Are Immutable"
    type: section
  - name: "Arrays of Cards"
    type: section
  - name: "Sequential Search"
    type: section
  - name: "Binary Search"
    type: section
  - name: "Tracing the Code"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Objects of Arrays"
    type: chapter
  - name: "Decks of Cards"
    type: section
  - name: "Shuffling Decks"
    type: section
  - name: "Selection Sort"
    type: section
  - name: "Merge Sort"
    type: section
  - name: "Subdecks"
    type: section
  - name: "Merging Decks"
    type: section
  - name: "Adding Recursion"
    type: section
  - name: "Static Context"
    type: section
  - name: "Piles of Cards"
    type: section
  - name: "Playing War"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Extending Classes"
    type: chapter
  - name: "CardCollection"
    type: section
  - name: "Inheritance"
    type: section
  - name: "Dealing Cards"
    type: section
  - name: "The Player Class"
    type: section
  - name: "The Eights Class"
    type: section
  - name: "Class Relationships"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Arrays of Arrays"
    type: chapter
  - name: "Conway's Game of Life"
    type: section
  - name: "The Cell Class"
    type: section
  - name: "Two-Dimensional Arrays"
    type: section
  - name: "The GridCanvas Class"
    type: section
  - name: "Other Grid Methods"
    type: section
  - name: "Starting the Game"
    type: section
  - name: "The Simulation Loop"
    type: section
  - name: "Exception Handling"
    type: section
  - name: "Counting Neighbors"
    type: section
  - name: "Updating the Grid"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Reusing Classes"
    type: chapter
  - name: "Langton's Ant"
    type: section
  - name: "Refactoring"
    type: section
  - name: "Abstract Classes"
    type: section
  - name: "UML Diagram"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Advanced Topics"
    type: chapter
  - name: "Polygon Objects"
    type: section
  - name: "Adding Color"
    type: section
  - name: "Regular Polygons"
    type: section
  - name: "More Constructors"
    type: section
  - name: "An Initial Drawing"
    type: section
  - name: "Blinking Polygons"
    type: section
  - name: "Interfaces"
    type: section
  - name: "Event Listeners"
    type: section
  - name: "Timers"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Tools"
    type: chapter
  - name: "Installing DrJava"
    type: section
  - name: "DrJava Interactions"
    type: section
  - name: "Command-Line Interface"
    type: section
  - name: "Command-Line Testing"
    type: section
  - name: "Running Checkstyle"
    type: section
  - name: "Tracing with a Debugger"
    type: section
  - name: "Testing with JUnit"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Javadoc"
    type: chapter
  - name: "Reading Documentation"
    type: section
  - name: "Writing Documentation"
    type: section
  - name: "Javadoc Tags"
    type: section
  - name: "Example Source File"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Graphics"
    type: chapter
  - name: "Creating Graphics"
    type: section
  - name: "Graphics Methods"
    type: section
  - name: "Example Drawing"
    type: section
  - name: "Vocabulary"
    type: section
  - name: "Exercises"
    type: section
  - name: "Debugging"
    type: chapter
  - name: "Compile-Time Errors"
    type: section
  - name: "Run-Time Errors"
    type: section
  - name: "Logic Errors"
    type: section
insert_sections:
  - name: Exercise 2.1
    type: section
    chapter: Variables and Operators
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex2.1
      
      If you are using this book in a class, you might enjoy this exercise.
      Find a partner and play {\it Stump the Chump}:

      Start with a program that compiles and runs correctly.
      One player looks away, while the other player adds an error to the program.
      Then the first player tries to find and fix the error.
      You get two points if you find the error without compiling the program, one point if you find it using the compiler, and your opponent gets a point if you don't find it.
      
      {Run!}(sh .guides/bg.sh javac code/ch02/exercise2_1.java java -cp code/ch02/ exercise2_1 )
      
      \end{exercise}
  - name: Exercise 2.2
    type: section
    chapter: Variables and Operators
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  %%V6 Ex2.2
      \label{ex:date}

      The point of this exercise is (1) to use string concatenation to display values with different types (\java{int} and \java{String}), and (2) to practice developing programs gradually by adding a few statements at a time.

      \begin{enumerate}

      \item Copy or type in something like the Hello World program and make sure you can compile and run it.

      \item Following the example in Section~\ref{sec:printvar}, write a program that creates variables named \java{day}, \java{date}, \java{month}, and \java{year}.
      The variable \java{day} will contain the day of the week (like Friday), and \java{date} will contain the day of the month (like the 13th).
      %What type is each variable?
      Assign values to those variables that represent today's date.

      \item Display the value of each variable on a line by itself.
      This is an intermediate step that is useful for checking that everything is working so far.
      Compile and run your program before moving on.

      \item Modify the program so that it displays the date in standard American format; for example: {\tt Thursday, July 18, 2019}.

      \item Modify the program so it also displays the date in European format.
      The final output should be as follows:
      
      American format: Thursday, July 18, 2019
      European format: Thursday 18 July 2019
      
      \end{enumerate}
      
      
      {\em Hint:} You should be able to copy, paste, and modify the code from Step 4 when completing Step 5.
      
       {Run!}(sh .guides/bg.sh javac code/ch02/exercise2_2.java java -cp code/ch02/ exercise2_2 )
      
      
      \end{exercise}
  - name: Exercise 2.3
    type: section
    chapter: Variables and Operators
    section: Exercises
    before: false
    latex: |
      The point of this exercise is to (1) use some of the arithmetic operators, and (2) start thinking about compound entities (like time of day) that are represented with multiple values.

      \begin{enumerate}

      \item Create a new program called {\it Time.java}.
      From now on, we won't remind you to start with a small, working program, but you should.

      \item Following the example program in Section~\ref{sec:printvar}, create variables named \java{hour}, \java{minute}, and \java{second}.
      Assign values that are roughly the current time.
      Use a 24-hour clock so that at 2:00 PM the value of \java{hour} is \java{14}.

      \item Make the program calculate and display the number of seconds since midnight.

      \item Calculate and display the number of seconds remaining in the day.

      \item Calculate and display the percentage of the day that has passed.
      You might run into problems when computing percentages with integers, so consider using floating-point.

      \item Change the values of \java{hour}, \java{minute}, and \java{second} to reflect the current time.
      Then write code to compute the elapsed time since you started working on this exercise.

      \end{enumerate}
      
       {Run!}(sh .guides/bg.sh javac code/ch02/exercise2_3.java java -cp code/ch02/ exercise2_3 )
      

      {\em Hint:} You might want to use additional variables to hold values during the computation.
      Variables that are used in a computation but never displayed are sometimes called ``intermediate'' or ``temporary'' variables.
  - name: Exercise 6.1
    type: section
    chapter: Loops and Strings
    section: Exercises
    before: false
    latex: |
      Consider the following methods (\java{main} and \java{loop}):

      \begin{code}
      public static void main(String[] args) {
           loop(10);
      }

      public static void loop(int n) {
            int i = n;
            while (i > 1) {
                System.out.println(i);
                if (i % 2 == 0) {
                    i = i / 2;
                } else {
                    i = i + 1;
                }
            }
        }
      \end{code}

      \begin{enumerate}

      \item Draw a table that shows the value of the variables \java{i} and \java{n} during the execution of \java{loop}.
      The table should contain one column for each variable and one line for each iteration.

      \item {Check It!|assessment}(multiple-choice-1484106663)


      \item {Submit Answer!|assessment}(free-text-3069842210)

      % If i is odd and we increment by 1, the result is even.  So the second
      % branch is always followed by the first branch.
      % If i is even and we divide by 2, the result might be odd.  So in the
      % worst case, we might alternate between the branches.
      % But we can't do more of the second branch than the first.
      % So we divide at least as often as we add.

      % If i is 1, we're done.
      % If i is 2, we divide by 2 and we're done.
      % If i is greater than 2, the first branch decreases more than the
      % second branch increases.
      % So if we do one of each, the net effect is a decrease.
      % Therefore, the value of i has to decrease after any two steps.

      \end{enumerate}
  - name: Exercise 6.2
    type: section
    chapter: Loops and Strings
    section: Exercises
    before: false
    latex: |
      Let's say you are given a number, $a$, and you want to find its square root.
      One way to do that is to start with a rough guess about the answer, $x_0$, and then improve the guess by using this formula:
      %
      \[ x_1 =(x_0 + a/x_0) / 2 \]
      %
      For example, if we want to find the square root of 9, and we start with $x_0 = 6$, then $x_1 = (6 + 9/6) / 2 = 3.75$, which is closer.
      We can repeat the procedure, using $x_1$ to calculate $x_2$, and so on.
      In this case, $x_2 = 3.075$ and $x_3 = 3.00091$.
      So the repetition converges quickly on the correct answer.

      Write a method called \java{squareRoot} that takes a \java{double} and returns an approximation of the square root of the parameter, using this technique.
      You should not use \java{Math.sqrt}.

      As your initial guess, you should use $a/2$.
      Your method should iterate until it gets two consecutive estimates that differ by less than 0.0001.
      %In other words, return when the absolute value of $x_n - x_{n-1}$ is less than 0.0001.
      You can use \java{Math.abs} to calculate the absolute value of the difference.

      {Run!}(sh .guides/bg.sh javac code/ch06/exercise6_2.java java -cp code/ch06/ exercise6_2 )
  - name: Exercise 6.3
    type: section
    chapter: Loops and Strings
    section: Exercises
    before: false
    latex: |
      One way to evaluate $\exp(-x^2)$ is to use the infinite series expansion:
      %
      \[ \exp(-x^2) = 1 - x^2 + x^4/2 - x^6/6 + \ldots \]
      %
      The $i$th term in this series is $(-1)^i x^{2i} / i!$.
      Write a method named \java{gauss} that takes \java{x} and \java{n} as arguments and returns the sum of the first \java{n} terms of the series.
      You should not use \java{factorial} or \java{pow}.
        
       {Run!}(sh .guides/bg.sh javac code/ch06/exercise6_3.java java -cp code/ch06/ exercise6_3 )
      
  - name: Exercise 6.4
    type: section
    chapter: Loops and Strings
    section: Exercises
    before: false
    latex: |
      \index{abecedarian}

      A word is said to be ``abecedarian'' if the letters in the word appear in alphabetical order.
      For example, the following are all six-letter English abecedarian words:

      \begin{quote}
      abdest, acknow, acorsy, adempt, adipsy, agnosy, befist, behint, %\\
      beknow, bijoux, biopsy, cestuy, chintz, deflux, dehors, dehort, %\\
      deinos, diluvy, dimpsy %\\
      \end{quote}

      Write a method called \java{isAbecedarian} that takes a \java{String} and returns a \java{boolean} indicating whether the word is abecedarian.
      %Your method can be iterative or recursive.
      
      {Run!}(sh .guides/bg.sh javac code/ch06/exercise6_4.java java -cp code/ch06/ exercise6_4 )
      
  - name: Exercise 6.5
    type: section
    chapter: Loops and Strings
    section: Exercises
    before: false
    latex: |
      \label{doubloon}

      \index{doubloon}

      A word is said to be a ``doubloon'' if every letter that appears in the word appears exactly twice.
      Here are some example doubloons found in the dictionary:

      \begin{quote}
      Abba, Anna, appall, appearer, appeases, arraigning, beriberi, bilabial, boob, Caucasus, coco, Dada, deed, Emmett, Hannah, horseshoer, intestines, Isis, mama, Mimi, murmur, noon, Otto, papa, peep, reappear, redder, sees, Shanghaiings, Toto
      \end{quote}

      Write a method called \java{isDoubloon} that takes a string and checks whether it is a doubloon.
      To ignore case, invoke the \java{toLowerCase} method before checking.
        
      {Run!}(sh .guides/bg.sh javac code/ch06/exercise6_5.java java -cp code/ch06/ exercise6_5 )
  - name: Exercise 6.6
    type: section
    chapter: Loops and Strings
    section: Exercises
    before: false
    latex: |
      \begin{exercise}  

      \index{Scrabble}

      In Scrabble each player has a set of tiles with letters on them.
      The object of the game is to use those letters to spell words.
      The scoring system is complex, but longer words are usually worth more than shorter words.
        
        
      % Full credit to Marc Loy for getting this reference.

      Imagine you are given your set of tiles as a string, like \java{"quijibo"}, and you are given another string to test, like \java{"jib"}.

      Write a method called \java{canSpell} that takes two strings and checks whether the set of tiles can spell the word.
      You might have more than one tile with the same letter, but you can use each tile only once.

      Note: Scrabble is a registered trademark owned in the USA and Canada by Hasbro Inc., and in the rest of the world by J.\ W.\ Spear \& Sons Limited of Maidenhead, Berkshire, England, a subsidiary of Mattel Inc.
        
       {Run!}(sh .guides/bg.sh javac code/ch06/exercise6_6.java java -cp code/ch06/ exercise6_6 )
      \end{exercise}

     